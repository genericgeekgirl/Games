routine DoKick
{
!	print object.name

	if object.charnumber ~= 14
	{
		DoHit()
		return true
	}

	else
	{
		if ghoul.conscious = 1
		{
			"I don't get a great shot in at the ghoul, but I do damage it a little before
			moving back out of the range of its touch."

			ghoul.hitpoints--
			ghoul is not neutral
			ghoul is villain
			ghoul.peaceful = FALSE
			fight_active = 1 

			if ghoul.hitpoints = 0
			{
				Ghoul_Dies()
			}

!			else
!			{
!				DoVillainLoop()
!			}

			return true

			
		}

		else
		{
			"I stomp on the ghoul for the pure, unadulterated pleasure of it."

		}
	}
}

routine DetermineParalysis()
{
local paralysis_variable 

	if object.charnumber = 14
	{
		if ghoul.conscious = 0 
		{
			"It's already knocked out... most likely dead.";
			return true
		}

		if (xobject ~= nothing) and (xobject is not melee_weapon)
		{
			!print xobject.name
			!"blah"
			return
		}

		elseif (socks is worn) or (gaming_glove is worn) or (xobject is melee_weapon)  
		{
			!"Paralysis_Variable is 0"
			paralysis_variable = 0 
						
		}
		else
		{
			!"Paralysis_Variable is 1"
			paralysis_variable = 1

			if ghoul is special
			{
				"I time my strike to connect just when the ghoul turns its slavering attention to Audrey... and
				I connect.\n"

				"An instant after I do, I feel a shockwave of pain rip through my knuckles, up through the veins in
				my arm and into my chest. It feels as if moving through a supernatural, wholly malign manner -- 
				far too fast for the pain to be working its way through my veins.\n"

				"My entire body seizes up and I can only move a step or two away from the ghoul before I fall over hard to
				my side, my head stiff and unmoving and staring at the scene in front of me. \n"

				"Content that I am no longer a threat, the ghoul makes a quick slash at Audrey with its claws. She breaks
				to her knees, quickly succumbing to the paralysis herself. The ghoul curls its fingers into her short, cropped
				hair and somehow Audrey gets a lone tear to fall from her face and I try to tell her that I love her so
				much, but I can't and the ghoul snaps his wrists back and breaks her neck and her eyes shoot back into
				her skull and he draws her limp body up to his face and savages her mouth and oh lord no and he feeds on
				her and little bits of her cheek fall to the ground and I see her lips torn off and spat out...\n"

				"I try with all my will to stop him, to fight, to defeat it. But I can't even shut my own eyes.\n"

				"The creature pauses for ten or twenty seconds after consuming the bulk of Audrey's soft, warm, so-white 
				and precious flesh before doing the exact same thing to me."
			

				Player is paralyzed
				Player.hitpoints = -101

				endflag = 2 

				EndGame(2)
			}

			else
			{
				ghoul is special

				"If I strike the ghoul with my bare hands... it will paralyze me.";

			}

		}
	}

return paralysis_variable
}

routine DoThrowAttack(victim, thrown_obj)
{
!	print "Entering DoThrowAttack"

	if thrown_obj is broken
	{
		CArt(thrown_obj) 
		" is broken and useless."
		return
	}

	else
	{
		thrown_obj is thrown

		move thrown_obj to location

		DoHit()
	}
}	

routine DoShoot
{
local j, guncounter, gunused 
 
	canshoot = false 

	for j in Player
	{
		if j is gun
		{
			gunused = j 
			guncounter++
		}
		
	}

	if guncounter > 1 
	{
		if xobject is not gun 
		{
			"\B[Specify which gun to shoot with.]\b"
			return false 
		}

		else
		{
			!print "Shooting with the "; xobject.name 
			gunused = xobject 
			canshoot = true 
		}
	}
	
	if guncounter = 0
	{
		"I don't have anything to shoot!"
		return true 
	}

	if gunused.ammo < 1
	{
		"That gun doesn't have any ammo left."
		return true
	}

	if guncounter = 1

		canshoot = true
		
	global_gunused = gunused 

	if object is breakable
	{
		if object is not broken
		{
			run object.shooting_descript
			gunused.ammo--
		}
		else
		{
			"That's already taken enough damage."
		}
	}
	else
	{
		DoHit(gunused,0,0)
	}

return true
}


replace DoHit(gunname) 
{
local damage, randnum, paralysis_var

!	if xobject is melee_weapon
!	{
		!This should be commented after debugging
		!"It's a weapon."
!	}

!	elseif xobject is throwable
!	{
		!This should be commented after debugging
		!Also, remember to set it so that it is not thrown at the end
!		if xobject is thrown
!		{
!			"The weapon has been thrown."
!		}
!	}
!
!	else
!	{
!		print xobject.name
!	}

!	print object.name

	if Player in Neon
	{
		"I can't fight anyone while I'm inside the car!"
		return
	}
	if xobject is broken
	{
		CArt(xobject) 
		" is broken and useless."
		return
	}

	if object is neutral
	{
		object is not neutral
		object is villain
	}


	if (object.charnumber = 1)
	{
		"I can't fight myself."

		if xobject is throwable and xobject is thrown
		{
			move xobject to Player
		}

		return
	}

	if (object.charnumber = 13)
	{
		! If it's the skeleton, fix its problem with the article... want it to be "a" at first. 

		Skeleton.article #1 = "the"
	}

	if (object.charnumber = 21)
	{
		!If it's a vampire, check to see that the garlic is around

		if (garlic not in Player) and (garlic not in location)
		{
			"The vampire turns gaseous before my attack lands."

			return
		}	
	}

	if (object is hero)
	{
		"Nah."

		if xobject is throwable and xobject is thrown
		{
			move xobject to Player
		}

		return 
	}

	
	if (object is not living) and (object is not breakable)
	{
		"I can't really fight that."
		return
	}

	fight_active = 1

	if (object.charnumber = 14 ) and (xobject is not thrown)
	{
		paralysis_var = DetermineParalysis()

		if paralysis_var = 1
		{
			""
			return 
		}
		else
		{
			!""
		}
	}

	DoRiotCheck()


!Go through the fighting routine

!\	if (object.in_scope) = 0
	{
		CArt(object)
		print " isn't here. TEST"
		return
	}
\!

	if object is not living and object is breakable
	{
		if object is not broken
		{
			object is broken

			"I cruelly break ";
			Art(object)
			print "!"
			return
		}
		else
		{			
			CArt(object)
			print " is already broken."
			return
		}
	}

	if (object.conscious) = 0
	{
		CArt(object)
		print " is not conscious enough to put up a fight right now."
		return
	}

	AttackLoop[1] = (random(20)+Player.attackadjust)

	if (AttackLoop[1] >= object.armorclass)
	  	{
		  	!damages opponent

			if canshoot = true
			{
				 damage = (random(gunname.damagepotential))
				 object.hitpoints = ((object.hitpoints) - damage)
				 !MessageLoop[0] = 1
			
				 randnum = random(1)
				 select(randnum)
					case 1
						{
							print "I shoot "; 
							Art(object)
							print "!"

							gunname.ammo--	
	
						}			 
		
			}
	
			else
			{
				if xobject is melee_weapon
				{
					!print "Melee weapon used!"

					while (damage < xobject.weapon_dam_min)
					{
						damage = (random(xobject.weapon_dam_max))
					}

					if xobject.strength = object.weakness
					{
						damage += 70
					}
					
					! This should be commented out after debugging
					!print "The damage is";
					!print number damage;
					!print ".\n"
				
				}
				elseif xobject is not melee_weapon and xobject is not thrown and xobject ~= nothing
				{
					"That object cannot be used in melee combat."
					!print xobject.name

					return 
				}

				elseif xobject is thrown
				{
					!print "Thrown weapon used!"

					while (damage < xobject.weapon_dam_min)
					{
						damage = (random(xobject.weapon_dam_max))
					}

					if xobject.strength = object.weakness
					{
						damage += 70
					}

					! This should be commented out after debugging
					!print "The damage is ";
					!print number damage;
					!print ".\n"
				
				}

				else
				{
					damage = (random(Player.damagepotential))
				}


				 object.hitpoints = ((object.hitpoints) - damage)
				 !MessageLoop[0] = 1

				! If it's breakable and it hit, well, it just got broken

				 if xobject is melee_weapon and xobject is not thrown
				 {

					print "I clobber ";
					Art(object)
					print " with ";
					Art(xobject)
					print ".\n"

					! If it's breakable and it hit, well, it just got broken
					if xobject is breakable
					{
						xobject is broken
						print "(";
						CArt(xobject)
						" breaks as a result.)\n"

						if ((xobject = Ball_Stand) or (xobject = Crystal_Ball))
						{
							Ball_Stand is broken
							Crystal_Ball is broken
						}
					}
				}

				if xobject is thrown
				{
 					! Need to remove the following attribute
					xobject is not thrown 

					print "I hit ";
					Art(object)
					print " with ";
					Art(xobject)
					print "."

					! If it's breakable and it hit, well, it just got broken
					if xobject is breakable
					{
						xobject is broken

						print "\n(";
						CArt(xobject)
						print " breaks as a result.)"
					}
				}

				else
				{	
					 randnum = random(1)
					 select(randnum)
						case 1
							{
								Fight_Quip()

								if xobject is not melee_weapon 
								{
									print "I hit "; 
									Art(object)
									print "!"
								}
								else
								{
									""
								}
							}
				}
			}
		}

	if (AttackLoop[1] < object.armorclass)
			{

				if xobject is thrown
				{
					xobject is not thrown 

					print "I throw ";
					Art(xobject)
					print " at ";
					Art(object)
					print ", but miss!"
				}
				else
				{

				 !misses opponent
				 !MessageLoop[0] = 0
				 randnum = random(1)
				 select(randnum)
					case 1
						{
							print "I attack, but miss "; 
							Art(object)
							print "!"
						
							if canshoot = true
							{
								gunname.ammo--
							}
						}
				}
			} 

	if (object.conscious = 0)

		{	
			if (object.charnumber = 14)
			{
				!Ghoul
				
				Ghoul_Dies()				

				return
			}
			
			if (object.charnumber = 15)
			{
				! Shadow
				GameEvents[26] = 2

				ScoreArray[25] = 1

				Shadow_Dies()

				return 
			}

			if (object.charnumber = 16)
			{
				! Ghast
				ScoreArray[12] = 1

				Ghast_Dies()

				return

			}

			if (object.charnumber = 17)
			{
				! Mummy

				ScoreArray[26] = 1
			}	


			if (object.charnumber = 24)
			{
				ScoreArray[23] = 1

				Wraith_Dies()

				LocationState[5] = 4
				
				return
			}


			if (object.charnumber = 21)
			{

				ScoreArray[24] = 1

				Vampire_Dies()

				return
			}
		
			print "\n";
			CArt(object)
			print " collapses and falls to the ground."

			Player.attackadjust++

			object is not following


			if (object.charnumber = 9)			
			{
				!Zombiebot

				ScoreArray[39] = 1

				if GameEvents[28] = 1
				{
					Activate(Zombie_Gets_Back_Up)
				}

				else
				{
					GameEvents[28] = 1

					LocationState[1] = 1 

					if Duffy in Academy_Videos
					{
						Academy_Door is open
						Academy_Door is openable
					}

					CharExclaim(Clerk, ExclaimArray[1])
				}
			}				

			if (object.charnumber = 13)
			{
				! Skeleton

				GameEvents[8] = 3			! Set it so that Duffy can leave the Bead Store 
				Barnaby is following
				Audrey is following
				Casey is following

				CharExclaim(Sydney, ExclaimArray[1])
			}

			if (object.charnumber = 22)
			{
				! Zombie2 is dead
				GameEvents[11] = 1 

				if Barnaby.hitpoints < Barnaby.maxhitpoints
				{
					Barnaby.hitpoints = Barnaby.maxhitpoints
					CharExclaim(Barnaby, ExclaimArray[7])
				}

				!Set it so that Trott can be accessed in the security room in ten turns if it's knocked upon 
				Activate(Trott_Unlocks_Door)

				ScoreArray[7] = 1

			}
		}

return true
}


routine DoFightLoop
{
local x, y, numenemies



!	print "doing fight loop........."


! 1) Init the arrays to zero for everyone each turn 

	for (x = 1; x <= NUMCHARACTERS; x++)
		{
			HeroesPresent[x] = 0
			VillainsPresent[x] = 0
			AttackLoop[x] = 0
			EnemyLoop[x] = 0
		}


! 2) See which villains are around
!    Villains should be CONSCIOUS, A VILLAIN, NOT PEACEFUL and IN LOCATION to be fighting
!    Villains should be CONSCIOUS, A VILLAIN, NOT PEACEFUL NOT PARALYZED and IN LOCATION to be fighting


	for (x = 1; x <= NUMCHARACTERS; x++ )
	{

		!print "Entering the for loop, and x is... ";
		!print number x 
		!print Characters[x].name


		if (Characters[x] in location)
		!if findobject(Characters[x])
		{

			VillainsPresent[x] = VillainsPresent[x] + 1 
		}
		if (Characters[x].conscious = 1)
		{
			VillainsPresent[x] = VillainsPresent[x] + 1 
		}
		if (Characters[x] is villain) 
		{

			VillainsPresent[x] = VillainsPresent[x] + 1 
		}

		if (Characters[x] is not paralyzed)
		{
			VillainsPresent[x] = VillainsPresent[x] + 1 
		}


		if (Characters[x].peaceful = false)
		{

			VillainsPresent[x] = VillainsPresent[x] + 1 
		}

		if (VillainsPresent[x] = 5)
!		if (VillainsPresent[x] = 4)
		{
		! Do their "attack" rolls


		AttackLoop[x] = (random(20)+Characters[x].attackadjust)

		!print "x is";
		!print number x

		!print "attackloop is ";
		!print number AttackLoop[x]
		}
	}!for 

! 3) See which heroes are around
!    Heroes should be CONSCIOUS, A HERO, NOT PEACEFUL NOT PARALYZED and IN LOCATION to be fighting

	for (x = 1; x <= NUMCHARACTERS; x++ )
	{
		!print Characters[x].name

		!if (Characters[x] in location) 
		!if (Characters[x] in location) or (parent(Characters[x]) = location)
		if findobject(Characters[x])
		{
			!print "char in location"
			HeroesPresent[x] = HeroesPresent[x] + 1
		}

		if (Characters[x].conscious = 1)
		{
			!print "char conscious"
			HeroesPresent[x] = HeroesPresent[x] + 1
		}
		if (Characters[x] is hero )
		{
			!print "char is hero"
			HeroesPresent[x] = HeroesPresent[x] + 1
		}
		if (Characters[x] is not paralyzed)
		{
			HeroesPresent[x] = HeroesPresent[x] + 1
		}

		if (Characters[x].peaceful = false) or (Characters[x].charnumber = 1)
		{

			!print "char not peaceful, or charnumber = 1"
			HeroesPresent[x] = HeroesPresent[x] + 1

			! Do their "attack" rolls
			AttackLoop[x] = (random(20)+Characters[x].attackadjust)
		}
	}!for 

! 4) Do the HeroLoop

!	DoHeroLoop

! 5) Do the VillainLoop

	DoVillainLoop

! 6) Count up the number of enemies left in order to see if the fight is still going on 

	numenemies = 0

	for (y = 1; y <= NUMCHARACTERS; y++)
		{
		  if (Characters[y].conscious = 1) and (Characters[y] in location) and (Characters[y].peaceful = false)
			{
				!print Characters[y].name
				numenemies++
			}
		}


	if numenemies = 0					! But... so long as it's not zero... 
		{

			fight_active = 0

			for (x = 1; x <= NUMCHARACTERS; x++)
			{
				Characters[x].activetarget = 100
			}
		}


}


routine DoRiotCheck
{

local x


	for (x = 1; x <= NUMCHARACTERS; x++)
	{
		if (Characters[x] is villain) and (Characters[x] in location) and (Characters[x].conscious = 1)
		Characters[x].peaceful = false
	}


}



routine DoVillainLoop
{
local x, a, z, possibleenemies


for (x = 1; x <= NUMCHARACTERS; x++)
{

if (Characters[x] is villain) and (VillainsPresent[x] = 5)
{
!print "villian Loop: Character's name is ";
!print Characters[x].name


! 1) Initialize a = 1

	a = 1

! 2) Put the number of legit heroes into EnemyLoop array 

	for (z = 1; z <= NUMCHARACTERS; z++) 	
	{
		if (HeroesPresent[z] = 5)  and (Characters[z] is hero)
		{
			EnemyLoop[a] = z
	
		}

		a++
	}

! 3) Choose between those enemies 

	for (a = 1; a < NUMCHARACTERS; a++)	
	{
		if EnemyLoop[a] > 0
		possibleenemies++
	}

				
! 4) Account for this, for testing purposes

	 if (possibleenemies) = 0 
	{
		if Duffy in Neon
		{
			Zombie_Attacks_Car()
		}
		
		else
		{
			! Remember to remove this!!

			!"No hero available!\n"
			!"SYSTEM ERROR 3665!\n"
			!pause
		}
	}


	if (possibleenemies) > 0
	{
		if Characters[x].charnumber = 21 and garlic in Duffy
		{
			"\nThe vampire shifts from side to side. From the look on her face, she'd love to attack me, 
			but can't will herself to getting close because of the garlic."
		}

		elseif Player in Neon
		{
			"\nThe zombie slams its open palms against the side of the car!"
		}
		else
		{
			DoDamage(Characters[x], Characters[1]) 
		}
	}

}
}
return true 
}

routine DoHeroLoop
{
local x, a, z, possibleenemies


for (x = 1; x <= NUMCHARACTERS; x++)
{

if (Characters[x] is hero) and (HeroesPresent[x] = 5)
{
!print "HeroLoop: Character's name is ";
!print Characters[x].name


! 1) Initialize a = 1

	a = 1

! 2) Put the number of legit heroes into EnemyLoop array 

	for (z = 1; z <= NUMCHARACTERS; z++) 	
	{
		if (VillainsPresent[z] = 5)  and (Characters[z] is villain)
		{
			EnemyLoop[a] = z
	
		}

		a++
	}

! 3) Choose between those enemies 

	for (a = 1; a < NUMCHARACTERS; a++)	
	{
		if EnemyLoop[a] > 0
		possibleenemies++
	}

				
! 4) Account for this, for testing purposes

	 if (possibleenemies) = 0 
	{
		!"No villain available!\n"
		!"SYSTEM ERROR 3665!\n"
		!pause
		! (well, this could actually happen if they are all beaten)
	}


	if (possibleenemies) > 0
	{
		!do nothing for right now...
		!DoDamage(Characters[x], Characters[1])
		! need to make it so that they pick a villain and stick with him 
	}

}
}
return true 
}



routine DoDamage (attacker, victim)
{
local x, i, randnum, damage, gun_used, weapon_used  

	x = attacker.charnumber

	!print "x is ";
	!print number x

	!print "in Do Damage: attackloop[x] is";
	!print number AttackLoop[x]

	if (AttackLoop[x] >= victim.armorclass)
 		{
		  	 !damages Player


			!check to see if a gun is used

			for i in attacker
			{
				if i is gun
				{
					weapon_used = i 
					gun_used = true
				}
			}

			if gun_used = true
				{
					damage = (random(weapon_used.damagepotential))
					victim.hitpoints = ((victim.hitpoints) - damage)

					print "\n";
					CArt(attacker)
					print " shoots and hits";

					if victim = Player
					{
						" me!"
					}
					else
					{
						Art(victim)
						print "!"
					}
					!FightResponse(attacker.charnumber, 0, 1)
				}

			else
				{

					 ! Stop the poltergeist from attacking this way
					 if attacker.charnumber ~= 20
					 {
						 damage = (random(attacker.damagepotential))
						 victim.hitpoints = ((victim.hitpoints) - damage)
						 !MessageLoop[x] = 1
			
						 randnum = random(1)
						 select(randnum)
						 case 1
						{
							 print "\n";
							CArt(attacker)
							print " attacks and hits";

							if  victim = Player
							{
								print " me!"

								if attacker is mummylike
									Give_Rotting_Disease(Player)
							}
				
							else
							{
								Art(victim)				
								print "!"
							}
							!FightResponse(attacker.charnumber, 0, 1)
					}
				}
			}
	
		}
	
	if (AttackLoop[x] < victim.armorclass)
		{
			 !misses Player
		 	 MessageLoop[x] = 0
			 randnum = random(1)

			 select(randnum)
			 case 1
		 	{
				print "\n";
				CArt(attacker)
				print " attacks, but misses"; 

				if  victim = Player
				{
					print " me!"
				}
				
				else
				{
					Art(victim)				
					print "!"
				}
				!FightResponse(attacker.charnumber, 0, 0)
			}
		}

UpdateInvWindow()
}


routine Fight_Quip()
{

local a

a = random(35)

select(a)
case 1
	{
		"\I\"And now... the pain!\"\i I shriek. ";
	}

case 2
	{
		"\I\"Who else wants some of this? Plenty to go 'round!\"\i I say. ";
	}

case 3
	{
		"\I\"Welcome to the worst part of your day!\"\i I exclaim. ";
	}

case 4
	{
		"\I\"Everythin' coming up DUFFY!\"\i I state to those who would hear. ";
	}

case 5
	{
		"\I\"No one tosses a dwarf!\"\i I say, not really caring that it's nonsense. ";
	}

case 6
	{
		"\I\"Eat it, fuck face!\"\i I say in rage. ";
	}

case 7
	{
		"\I\"I'll spank you like the Gerber baby!\"\i I say. ";
	}

case 8
	{
		"\I\"I'll beat you like an adulterous pinata!\"\i I say. ";
	}

case 9
	{
		"\I\"I am \Bkillin'\b your dudes!\"\i I say, to anyone who will listen. ";
	}

case 10
	{
		"\I\"End of the module, pal!\"\i I give a sincere sneer with this. ";
	}

case 11
	{
		"\I\"None of you understand... I'm not in here with you, you're in here with me!\"\i I say. ";
	}

case 12
	{
		"\I\"Justice! Like lightning!\"\i I shriek! ";
	}

case 13
	{
		"\I\"Bring back pre-casting, beeeeyatch!\"\i I scream! ";
	}

case 14
	{
		"\I\"It's clobbering time!\"\i I say. ";
	}

case 15
	{
		"\I\"Who wants some?\"\i I say. ";
	}

case 16
	{
		"\I\"And then I kicked him in the head till he was dead!\"\i I say, quoting \IBaldur's Gate.\i ";
	}

case 17
	{
		"\I\"Rue the day! Rue it! Now, goddammit!\"\i I scream. ";
	}

case 18
	{
		"\I\"Fear the funk of forty thousand years!\"\i I scream. ";
	}

case 19
	{
		"\I\"Now we're talking in the universal language -- hate!\"\i ";
	}

case 20
	{
		"\I\"Who else wants a piece of the pain pie?\"\i I ask. ";
	}

case 21
	{
		"\I\"Plenty of this to go around!\"\i I exclaim. ";
	}

case 22
	{
		"\I\"Pain, hate, suffering! I'm dishing out it all!\"\i ";
	}

case 23
	{
		"\I\"Rue Britannia!\"\i I shout. ";
	}

case 24
	{
		"\I\"Fiend!\"\i I exclaim. ";
	}

case 25
	{
		"\I\"Delight in the pain!\"\i I howl. ";
	}

case 26
	{
		"I try to wail like a banshee: \I\"ooOOooOOOO!\"\i ";
	}

case 27
	{
		"\I\"Nothing trumps hate but me!\"\i I screech. ";
	}

case 28
	{
		"\I\"Pow! It's my rage!\"\i I say. ";
	}

case 29
	{
		"\I\"Two bits of lenses means double the pain!\"\i I exclaim. " ;
	}

case 30
	{
		"\I\"I'll crush you into jelly! Ochre jelly!\"\i I yell. " ;
	}

case 31
	{
		"\I\"The first pick of the pain draft is you, bitchtits!\"\i I yell rather loudly. ";
	}

case 32
	{
		"\I\"Choke it all down!\"\i I scream. ";
	}

case 33
	{
		"\I\"Bend over and take this in your good eye!\"\i I chirp. ";
	}

case 34
	{
		"\I\"I'll rip you apart and piss on your grave!\"\i I threaten. ";
	}

case 35
	{
		"\I\"Wrap your tongue 'round this, twatterson!\"\i I yell. ";
	}

}

