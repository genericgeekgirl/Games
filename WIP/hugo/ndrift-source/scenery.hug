!!!!!!!!!!!!!!!!!!!!!!!
! Melee Weapon List
! (ensure is melee_weapon is set)
!
! lacrosse_stick
! vecna_hand

!!!!!!!!!!!!!!!!!!!!!!!
! Gun List
! (ensure is gun is set)
!
! nailgun

!!!!!!!!!!!!!!!!!!!!!!!
! Throwable Weapon List
! (ensure is throwable is set)
!
! postcard
! stool 
! Bead_Monitor
! Ball_Stand
! circular_rack

! Far objects
![Hugo] Hugo says, "Basically you just need to do:  remote_object remote_castle "castle" { nouns ...
!       adjectives ... etc.   real_object real_castle_object }"
![Hugo] Hugo says, "i.e., set the real_object property to whatever this is the remote version of."



scenery remote_ghast "ghast"
{
	nouns "ghast" "randolph"
	article "the"

type remote_object
real_object ghast

parse_rank -1 

	charnumber 100 

	is living, hidden

	in Corridor4

	long_desc 
	{	
		return self.real_object.long_desc 
	}
	before 
	{ 
		object DoLook 
		{ 
			return false 
		} 

		object DoGo 
		{ 
		"\B[Which way do you want to go?]\b" 
		} 
		object 
		{ 
		"I can't do that from here." 
		} 
	}
}


scenery remote_cupid "statue"
{
	nouns "cupid" "statue" "eros" "cupido" "amor" "cherub" "baby" "marble" "darkness"
	adjective "winged" "sculpted" "marble" 
	article "the"

	charnumber 98

	in Corridor4

	is hidden, ledgelike

type remote_object
real_object cupid_statue

parse_rank -1 

	long_desc 
	{	
		return self.real_object.long_desc 
	}
	before 
	{ 
		object DoLook 
		{ 
			return false 
		} 

		object DoGo 
		{ 
		"\B[Which way do you want to go?]\b" 
		} 
		object 
		{ 
		"I can't do that from here." 
		} 

		xobject DoThrowAt
		{
			if object = perfume_bottle
			{
				DoThrowAtStatue()
			}
			else
			{
				if object = glasses
				{
					"I can't throw my glasses! They've very valuable!"
				}
				else
				{
					"I miss rather badly, actually."
					move object to Corridor5 
					if object is breakable
					{
						object is broken
					}
				}
			}
		}
	}
}

scenery remote_wraith "wraith"
{ 
	nouns "wraith"

	in MallStore4

	is hidden

type remote_object 
real_object Wraith

parse_rank -1 ! a parse_rank of -1 puts it definitely out of the running unless there's no other possible object present 

	long_desc 
	{	
		if self is not special
		{
			self is special
			"I take another look out into the corridor. I don't see anything for a bit, but as the wraith revolves
			around in a bit of a silent stupor, I catch its red eyes and pale, ethereal face. Its body creates 
			a frosted diffusion in all the low light that passes it encounters."
		}

		else
		{
			return self.real_object.long_desc 
		}
	}
	before 
	{ 
		xobject DoThrowAt
		{
			if object = silver_comb
			{
				"I should wait until it's closer to throw things likely to damage it -- I am not a great shot."
			}
			else
			{
				"It's transparent and intangible, so really, doing that wouldn't have any effect."
			}
		}
		object DoLook 
		{ 
			return false 
		} 

		object DoGo 
		{ 
		"\B[Which way do you want to go?]\b" 
		} 
		object 
		{ 
		"I can't do that from here." 
		} 
	}
	after
	{
		object DoLook
		{
			SetQuip(3,41,0)
		}
	}
}

scenery remote_nurse "nurse"
{ 
	nouns "zombie" "nurse" "girl" "woman"
	adjective "zombie" "nurse"
!	in Security_Room

	is hidden

type remote_object 
real_object Nurse 

parse_rank -1 ! a parse_rank of -1 puts it definitely out of the running unless there's no other possible object present 

	long_desc 
	{	
		return self.real_object.long_desc 
	}
	before 
	{ 
		object DoLook 
		{ 
			return false 
		} 

		object DoGo 
		{ 
		"\B[Which way do you want to go?]\b" 
		} 
		object 
		{ 
		"I can't do that from here." 
		} 
	}
}


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Character Possessions
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
object lacrosse_stick "lacrosse stick"
{
	nouns "stick"
	adjective "lacrosse"
	article "Gibs's"

	size 2
	strength 3		! Piercing

	is melee_weapon, valuable	

	weapon_dam_min 1
	weapon_dam_max 8

	long_desc
	{
		"Gibs's stick is a Patterson brand Men's field lacrosse stick, designed for the Attack-Midfield
		position. It has a rawhide quick wall and bridge, woven with black leather, at one end (for catching
		and shooting balls) and a standard wood frame and handle at the other. Gibs has removed the plastic 
		butt-end for his stick and filed it down, as he often thrusts it at his opponents during play in one
		of the nastier leagues he plays in."
	}
}


object vecna_hand "Vecna's hand"
{
	nouns "hand" "vecna" "toy"
	adjective "vecna's"
	in living_room_table

	size 0

	is melee_weapon

	weapon_dam_min 1
	weapon_dam_max 3

	long_desc
	{
		"Vecna was a bad-ass (and quite mad) guy described in the original D&D game. One of the game's artifacts
		was his 'hand,' and this is a novelty item that they passed out at DragonCon a few years back."
	}
	before
	{
		object DoShake
		{
			"\"Er... hello there,\" I say, awkwardly, as I shake hands with the Vecna's hand toy."
		}
	}
}


object Criswell_Shirt "free pittman shirt"
{
	nouns "shirt" "pittman" "t-shirt"
	adjective "free" "criswell's"
	article "Criswell's"

	size 1

	is clothing
	in Criswell

	long_desc
	{
		"Criswell's shirt advertises his desire to see the football player Tavarian Pittman set free from the
		jail cell that The Man put him in."
	}

	before
	{
		object DoGet
		{
			"I don't want Criswell running around here topless. No one wants that."
		}
		object DoSmell
		{
			"It smells like sweat and horse tranq."
		}
	}
}

object Hypercolor_Shirt "hypercolor shirt"
{
	nouns "shirt" "hypercolor" "color" "t-shirt"
	adjectives "hypercolor" "hyper" "clerk's"
	article "the clerk's"

	size 1

	is clothing 
	in Clerk

	long_desc
	{
		"A long, \Ilong\i time ago, some scientist figured out that clothes can be equipped with an environmentally 
		sensitive feature, in which they change color based on body temperature. The fad gave out after a season
		or two, and is now only worn by the secretaries who work at the New Haz County Clerk's office, as they
		find handprints on the back of their skirts to be useful in sexual harassment charges. This means that
		the most uptight men on the planet are those men that work at the New Haz County Clerk's office, as 
		simply walking by a female employee can get them fired. This goes a long way to explaining why the
		bureaucracy of this shithole is so vast, but not really why the clerk would be wearing such attire."
	}
	before
	{
		object DoGet
		{
			"Taking the clothes off this guy's back would probably only advance his skill in martyrdom
			to a positively unholy level."
		}
		object DoSmell
		{
			"It smells strongly of cash."
		}
	}
}


object Pang_beer "glass of beer"
{
	nouns "glass" "beer"
	adjective "glass" "pang's"
	article "Pang's"

	size 1

	in Pang

	long_desc
	{
		"It's a foamy local brew in a stolen local glass."
	}

	before
	{
		object DoGet
		{
			"Pang would never give me any of his beer and besides, I have to drive in a bit."
		}
		object DoSmell
		{
			"It's got a funky, wheat-brew stench."
		}
		object DoTaste
		{
			"It's not for my lips."
		}
	}
}


object choker "choker"
{
	nouns "necklace" "choker"
	adjective "black" "leather" "thick"
	article "Audrey's"

	size 1

	in Audrey

	long_desc
	{
		"Audrey's choker is a kind of thick leather necklace. I've told her many times that seeing her wear it
		really turns me on, and unlike other women that I've been with, revealing to them the articles of clothing
		that they possess that I find sexy didn't make her immediately stop wearing it."
	}

	Before
	{
		self DoGet
		{
			"I've never pulled Audrey by her choker -- I'll admit that maybe sometimes the thought has crossed
			my mind in a kind of rough-sex-fantasy way, but it would possibly hurt her, and I could never
			let myself do that. Besides, it looks a hell of a lot better on her than it would me, or anyone
			else."
		}
	}
}		


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Chapter One 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

scenery Academy_register "register"
{
	noun "register" "till"
	adjective "cash" "beige" "credit" "large" "big"
	article "the"
	in Academy_counter

	size 200

	key_object Academy_walls 

	is container, locked, lockable, openable, not open

	long_desc
	{
		"The cash register is beige and on the large side. They come in all shapes and sizes and I suppose I have seen a
		bunch at the Mall where I work that differ in structure and security features... Jesus, this is depressing.
		I'm a cash register expert at age 27. What have I been doing with my life?"
	}
}


scenery muddy_streaks "muddy streaks"
{
	noun "mud" "streaks"
	adjective "muddy"
	article "some"

	is plural

	long_desc
	{
		"Well, I almost managed to make it out of this lousy city without getting ankles-deep in filth. Almost!"
	}
}


scenery floorboards "floorboards"
{
	noun "floor" "boards" "floorboard" "floorboards" "topography"
	adjectives "floor" "rotting"
	article "the"
	in Academy_Videos
	
	is platform, plural

	long_desc
	{
		"The floorboards are colored in a sickly grayscale, and appear somehow waterlogged. Their construct
		is quite shoddy, by that I mean it appears that the wood originally used was a cheap type of
		filler stock."
	}
	before
	{
		object DoLift
		{
			"The floorboards hold tight, and reveal no secrets about what lies beneath this grimy shack."
		}
	}
}

scenery Academy_walls "walls"
{
	noun "walls" "wall" "ceiling"
	article "the"
	in Academy_Videos
	
	is plural

	long_desc
	{
		"The walls are covered with either bits of filth and dirt, or one of a few movie posters from 
		cinema long ago that the help has yet to remove or update."
	}
}


scenery Academy_posters "posters"
{
	noun "posters" "dead" "poster" "promo"
	adjective "day" "faded"
	article "the"
	in Academy_Videos

	is plural

	parse_rank 100 

	long_desc
	{
		"An original \IDay of the Dead\i promo has been tacked onto the wall. That's really the only
		one of note. There are some other ones that I can't make out, and by 'make out,' I mean 'they
		were filmed in the sixties so I have no idea what their deal is.'"
	}
	before
	{
		object DoGet
		{
			"When New Haz finally does descend into complete anarchy, I will definitely be back and
			rip the movie posters down from the walls, but until then I am just gonna bide my time...
			bide my time..."
		}
	}
}

scenery Academy_graffiti "graffiti"
{
	noun "graffiti" "writing" "writings"
	article "the"
	in Academy_Videos


	is readable

	long_desc
	{
		"Most of the graffiti has been traced in with a thick, black, Sharpie marker.\n"

		Perform(&DoRead,self)
	}
	before
	{
		object DoRead
		{
			"Reading the graffiti just indicates a lot of non-sensible gibberish and screeching from long-ago teenagers. There's
			really not a lot that translates directly into English, although 'FREE ROBOTIC ENSLAVEMENT'
			and 'THEY EATS ME' can be found numerous times. I don't know what either phrase is supposed to
			really mean."
		}
		object DoGet
		{
			"Er, I 'get' the graffiti as well as a white kid originally from Western New York \Ican\i understand
			it already, I think."
		}
	}
}

class dvd_class
{
	nouns "dvd" 
	article "a"
	!is known 

	size 1

	long_desc
	{
		if GameEvents[66] < 4
		{
			GameEvents[66] = GameEvents[66] + 1
		}
		else
		{
			GameEvents[66] = 1
		}

		select(GameEvents[66])

		case 1
		{
			"There are many DVDs all around the store, and they all more or less look the same."
		}
		case 2
		{
			"Crap. Crap. Crap. Crap. Crap. Oh, what's this, looks like... ah, nah. Crap."
		}
		case 3
		{
			"Blood vessels begin bursting in my eyes due to how strictly terrible they are."
		}
		case 4
		{
			"These ones really make a great argument for books, radio and a more general parade of oral lies."
		}
	}

	plural_is movies
}

plural_class movies "dvd movies"
{
	article "some"
	nouns "movies" "dvds" "videos" "flicks" "tapes"
	single_noun "movie" "video" "tape" "flick"

	plural_of blue_movie, yellow_movie, green_movie, red_movie 
}

plural_class racks "racks"
{
	article "the"
	nouns "racks" "containers"
	single_noun "rack"

	plural_of Action_rack, Fantasy_rack, Drama_rack, Horror_rack
}

plural_class girls "girls"
{
	article "the"
	nouns "girls" "chicks"
	single_noun "girl"
	plural_of Audrey, Casey, Sydney, Vampire, Dead_Girl
}

dvd_class green_movie "movie from action rack"
{
	nouns "movie" "flick" "dvd" "film" "video"
	adjective "action"
	article "a"	
	!is known

	in Action_rack

	parse_rank 2

	before
	{
		object DoGet
		{
			DoGetMovie()
		}
	}
}

dvd_class red_movie "movie from drama rack"
{
	nouns "movie" "flick" "dvd" "film" 
	adjective "drama"
	article "a"
	!is known

	in Drama_rack

	parse_rank 1

	before
	{
		object DoGet
		{
			DoGetMovie()
		}
	}

}


dvd_class yellow_movie "movie from horror rack"
{
	nouns "movie" "flick" "dvd" "film" 
	adjective "horror"
	article "a"
	!is known

	in Horror_rack

	parse_rank 1

	before
	{
		object DoGet
		{
			DoGetMovie()
		}
	}

}

dvd_class blue_movie "movie from fantasy rack"
{
	nouns "movie" "flick" "dvd" "film" 
	adjective "fantasy"
	article "a"
	!is known

	in Fantasy_rack

	parse_rank 1
	
	before
	{
		object DoGet
		{
			xobject = Fantasy_rack
			DoGetMovie()
		}
	}

}


object Action_rack "action rack"
{

	nouns "rack" "shelf" "shelves"
	adjectives "action"
	article "the"
	in Academy_Videos

	is container, static, hidden
	capacity 1

	parse_rank 10

	long_desc
	{
		"It's constructed from a cheap wood board, and sags quite a bit due to the number of movies placed within it."
	}

	before
	{
		object DoLookIn, DoSearch
		{
			if DVD_case in Misc_rack
			{
				"I've long ago given up trying to intelligently browse the rack. My best bet is just to take a movie at 
				random from it and hope for the best."
			}
			else
			{
				"Well, there's really nothing aside from \ILord of the Rings\i that I'd really want to rent tonight."
			}
		}
		object DoEmpty
		{
			DoGetMovie(1)
		}

	}

}


object Drama_rack "drama rack"
{

	noun "drama" "rack"
	adjectives "drama"
	article "the"
	in Academy_Videos

	is container, static, hidden
	capacity 1

	parse_rank 10

	long_desc
	{
		"The drama rack should, in theory, contain a bunch of films that are shown on TNN, but it instead contains
		a hodge-podge of differently genred flicks. Criswell once took the DVD that Gibs shot a couple years ago 
		where he was apologizing to his girlfriend for getting into a threesome at this one guy Avandre's 
		bachelor party and put it in this rack. That was some serious drama. But I think Gibs rented and 
		destroyed it when he found out."
	}


	before
	{
		object DoLookIn, DoSearch
		{
			if DVD_case in Misc_rack
			{
				"I've long ago given up trying to intelligently browse the rack. My best bet is just to take a movie at 
				random from it and hope for the best."
			}
			else
			{
				"Well, there's really nothing aside from \ILord of the Rings\i that I'd really want to rent tonight."
			}
		}

		object DoEmpty
		{
			DoGetMovie(1)
		}
	}

}


object Fantasy_rack "fantasy rack"
{
	noun "fantasy" "rack"
	adjective "fantasy"
	article "the"
	in Academy_Videos

	is container, static, hidden
	capacity 1

	parse_rank 10

	long_desc
	{
		"It's constructed from a cheap wood board, and sags quite a bit due to the number of movies 
		placed within it. There's nothing fantastic about this rack."
	}

	before
	{
		object DoLookIn, DoSearch
		{
			if DVD_case in Misc_rack
			{
				"I've long ago given up trying to intelligently browse the rack. My best bet is just to take a movie at 
				random from it and hope for the best."
			}
			else
			{
				"Well, there's really nothing aside from \ILord of the Rings\i that I'd really want to rent tonight."
			}
		}

		object DoEmpty
		{
			DoGetMovie(1)
		}
	}
				
}


object Horror_rack "horror rack"
{

	noun "horror" "rack"
	adjective "horror"
	article "the"
	in Academy_Videos

	is container, static, hidden
	capacity 1

	parse_rank 10

	long_desc
	{
		"The horror rack used to be pretty good, but it's fallen into anarchy just like all the other racks.
		Criswell once accidentally rented \IBeaches\i from this rack and failed to note it was a chick flick.
		He's the only guy in the city that thinks the best horror flick of all-time doesn't feature 
		Bruce Campbell or Bill Chepil or whoever, but rather Bette Midler."
	}


	before
	{
		object DoLookIn, DoSearch
		{
			if DVD_case in Misc_rack
			{
				"I've long ago given up trying to intelligently browse the rack. My best bet is just to take a movie at 
				random from it and hope for the best."
			}
			else
			{
				"Well, there's really nothing aside from \ILord of the Rings\i that I'd really want to rent tonight."
			}
		}

		object DoEmpty
		{
			DoGetMovie(1)
		}
	}

}


object Misc_rack 
{

	long_desc
	{
		"This container is just where the LOTR DVD is -- this object is not supposed to actually be in the game."
	}

	is container, static, hidden
	capacity 100
}


scenery new_releases "new releases"
{
	noun "release" "releases"
	adjective "new"
	article "the"

	in Academy_Videos

	long_desc
	{
		"The term 'New Releases' shouldn't be taken literally. I don't think there is a flick from the last four
		years in this cesspit."
	}
	before
	{
		object DoGet
		{
			DoGetMovie(1)
		}
	}
}


object LOTR_DVD "Lord of the Rings DVD"
{
	noun "lotr" "lord" "rings" "dvd" 
	adjective "lord" "rings" "dvd"
	article "the"

	size 1

	! This object is only used for the first chapter. 
	in DVD_case

	is datamedia

	data_desc
	{
		"Popping this disc in brings up the movie's title menu. It's \ILord of the Rings\i, of course -- no surprises there."
	}

	long_desc
	{
		"It's a rather standard fifth-gen blue laser DVD, containing the Ten Year Anniversary release of \ILord of the Rings: The
		Fellowship of the Ring.\i I don't own a copy myself, but this is my favorite movie to rent. Favorite movie period, really."
	}
}


object DVD_case "DVD case"
{
	noun "case" "holder" "movie"
	adjective "diamond" "jewel" "dvd"
	article "the"
	in Misc_rack 
	is openable, not open 

	size 1

	capacity 1

	long_desc
	{
		"The DVD case is a thin, plastic container, about the size of a medium-length novel."
	}
	before
	{
		object DoOpen
		{
			"There's no need to open the case right now."
		}
	}
}


object nailgun "gun"
{
	nouns "pistol" "weapon" "gun" "armament" "nailgun"
	adjectives "orange" "electric"

	size 4

	is gun

	ammo 7 

	article "the"

	damagepotential 10 
	
	long_desc
	{
		if self is not special
		{
			self is special

			"I should first say something about the city of New Haz and explain why a video clerk would be 
			packing heat.\n"

			"Culturally, New Haz is kind of a stinking dump. It's been described as everything from a holding cell 
			for miscreants and scuzzballs, to a bleak planned community gone horribly and violently wrong, to 
			a slightly Utopian New Haven, Connecticut. I like it so much I live thirty-five minutes away, and
			believe me when I say that I would not work here if the Fort had a mall. Truthfully, it used to be 
			a lot worse before some kid brought to justice 80% of the city's Most Wanted Criminals a while
			back. But it's nevertheless rather rough, and you're legally required to possess a firearm to enter 
			the west side.\n"
		} 
		
			"This gun uses nail magazines, and fires them off slowly and messily, one at a time. Nice accuracy,
			but it has no spray or automatic settings. It's on the small side, as small as the manufacturer could
			go without embracing the \"ladies choice\" designation.\n"


		if self.ammo = 1 
		{
			print "This weapon has 1 shot remaining."
		}

		else
		{
			print "This weapon has ";
			print number self.ammo;
			print " shots remaining."
		}
			
	}

	before
	{
		object DoWipeOff, DoPolish
		{
			if self.ammo < 7
			{
				"I wipe it down, cleaning it a bit after its discharge of my fingerprints."
			}	
			else
			{
				"It's not in need of a wipedown."
			}
		}
	}
	after
	{
		object DoGet
		{
			if self is not special
			{
				self is special

				ScoreArray[2] = 1

				"I casually lift the gun from the counter without the clerk really noticing."
			}
			else
			{
				"Taken."
			}
		}
	}
}


scenery Academy_counter "counter"
{
	nouns "counter" "tabletop" "table" "bench" "board" "counter" "pulpit" "sideboard"
	adjective "front" "gray"
	article "the"
	in Academy_Videos

	is platform, static, open

	capacity 10

	long_desc
	{
		"The store's front counter is a long gray tabletop, behind which the clerk normally sits, and upon which is always a cash and
		credit register."
	}
}


object neon "car"
{
	nouns "neon", "r/t", "dodge" "car", "auto", "automobile", "vehicle", "sportscar" "plymouth" "door"
	adjective "black" "dodge" "plymouth" "car" "my"
	article "my"

	size 1000

	in Academy_Outside

	is openable, not open, automobile, enterable, static, switchable

	reach Neon


	long_desc
	{
		"I bought the car used from a dealer north of the Fort. I got a good deal on it, I guess. I only drive it to work and
		back, so there's not that much wear and tear on it. Anyway, it's black with a pair of silver stripes and gets 33 miles to
		the gallon. Useful as I often do not have the means to purchase many gallons."

	}
	before
	{
		object DoEnter
		{
			if neon is not open
			{
				"The car is shut."
			}
			else
			{
				"I get into the car.";
				Move Duffy to Neon

				if Barnaby not in Neon
				{
					Pang is not following
					Criswell is not following
					Barnaby is not following

					Move Pang to Neon
					Move Criswell to Neon
					Move Barnaby to Neon

					" Pang, Criswell and Barnaby join me."
				}
				else
				{
					""
				}
			}
		}
		object DoDrive 
		{
			DoDriveCar()
		}

		object DoSwitchOn
		{
			"(Entering my car first...)\n"

			DoDriveCar()
		}		
	
		object DoLift
		{
			"I realize it's just a under-two-ton Neon and all, but it's still going to take a few Potions of Heroism
			before I personally come anywhere near lifting it."
		}
	}

}


scenery nightsky "sky"
{
	nouns "sky"
	article "the"

	in Academy_Outside

	long_desc
	{
		"Looks like a storm is brewin'."
	}
}

scenery moon "moon"
{
	nouns "luna" "moon"
	article "the"

	in Academy_Outside

	long_desc
	{
		"It's out in full force, nicely illuminating the lot."
	}
}

object neon_trunk "trunk"
{
	nouns "trunk" "boot"
	article "the"

	part_of Neon

	is openable, not open, enterable, static

	reach Neon

	long_desc
	{
		"My trunk has two (stock) stripes on it and is sort of munged shut as I sort of backed into a tombstone with it
		once. (The details are this whole other thing.)"
	}
	before
	{
		object DoOpen
		{
			"The trunk is broken and can not be opened."
		}
	}
}


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Chapter Two
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

scenery  blue_couch "blue couch"
{
	nouns "couch" "lounger"
	adjective "blue"
	article "the"

	in Living_Room

	is enterable, platform, transparent

	reach blue_couch

	holding 0
	capacity 1
	size 100



	long_desc
	{
		"Pang's couch fits him and that's just about it, especially since he's let himself go physically
		as of late."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}
	}
	before
	{
		object DoEnter
		{
			"Entering Pang's couch isn't advisable -- he takes care of just about \Ball\b of his bodily
			functions within it. Just looking at it makes my skin crawl. Sitting in it, though...
			Yeah, sitting in it would be a good way for a lesser demon to orient and introduce
			oneself to Hell."
		}
	}
}


scenery tattered_couch "tattered couch"
{
	nouns "sofa", "couch", "furniture", "chesterfield", "ottoman"
	adjectives "tattered" "filthy" "white" "stained"
	article "a"
	prep "on", "off"
	in Living_Room

	is enterable, platform, transparent, open

	reach tattered_couch

	holding 0
	capacity 10

	long_desc
	{
		"The tattered couch was brought into the house by Pang, making his contribution list ultimately consist of one 
		filthy white couch, thirty empty pizza boxes, a box of imported German steroids, and a general case of utter, 
		infectious, hopelessness."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}
	}

	before
	{
		object DoLookUnder
		{
			 "Nobody's cleaned under the couch since we moved in. I'd be happier not rooting around underneath it."
		}

	}
	after
	{
		object DoEnter
		{
			"I sit down on the tattered couch.  ";

			if self is special
				"I can't help but feel that the aura of filth has me in its Bigby-like grasp."
			else
				print newline

			self is special
		}

		object DoExit
		{
			"I get up off the tattered couch."
		}
	}
}


object green_blanket "green blanket"
{
	nouns "blanket"
	adjective "green" "old"
	article "the"

	size 10

	in tattered_couch
	is clothing

	long_desc
	{
		"This old thing belongs to either Criswell or Pang. I only know that it was not originally green."
	}
}


object dreamcast "Dreamcast"
{
	nouns "dreamcast" "console" "game" "sega" "system"
	adjectives "dream" "sega"
	article "the"

	size 7

	in living_room_table

	long_desc
	{
		"It's some ancient game system. I don't know too much about it."
	}
	before
	{
		object DoPlay
		{
			"I wouldn't know how."
		}
	}
}


scenery speakers "speakers"
{
	nouns "speakers"
	adjective "dolby"
	article "the"

	in Living_Room
	is plural

	long_desc
	{
		"The speakers, like most of the objects in the Living Room that were not found by the side of a road, belong to Leary.
		He's got a nice little setup with these, Dolby 10.1 and whatnot."
	}
}


scenery entertainment_center "entertainment center"
{
	nouns "center" 
	adjectives "entertainment"
	article "the"

	in Living_Room
	is platform, transparent, open

	long_desc
	{
		"The entertainment center holds the TV, and a bunch of other stuff that Leary has managed to acquire
		with his steady, regular job and such."

		if child(self) and Player not in tattered_couch
		{
			!""
			Perform(&DoLookIn,self)
		}
	}
}


scenery living_room_table "table"
{
	nouns "counter" "tabletop" "table" "bench" "board" "counter" "pulpit" "sideboard"	
	adjective "coffee"
	article "the"

	in Living_Room
	is platform, transparent, open

	long_desc
	{
		"It's a nice little coffee table we put stuff on that belongs in the Living Room."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}
	}

}


object wine "bottle of wine"
{
	nouns "wine" "bottle" "dog" "20/20"
	adjectives "bottle" "red" "mad"
	article "the"

	in living_room_table

	size 2

	is openable, not open

	long_desc
	{
		"Okay, actually it's a bottle of Mad Dog 20/20."
	}
	before
	{
		object DoDrink
		{
			"I have to drive in a couple hours. Actually, though, with this, I wouldn't drink it 
			if I had to drive in a couple days."
		}
		object DoOpen
		{
			"I don't want that stuff anywhere near me."
		}
	}
	
}


object pillow "pillow"
{
	nouns "pillow"
	adjectives "dark" "little"
	article "the"

	size 1

	in tattered_couch
	
	long_desc
	{
		"It's a dark little throw pillow that we'd probably lend to guests if anyone could ever stomach spending the night in this sinkhole."
	}
}


scenery blinds "blinds"
{
	noun "blinds"
	article "the"

	in Living_Room

	long_desc
	{
		"The avocado blinds probably looked really stylish when they were new, forty-five years ago... oh, they probably didn't look good then, either."
	}
	before
	{
		object DoLift, DoGet
		{
			"There is an uneasy and unofficial truce between the four members of this house and the city. They don't bug us about the smells,
			sights and sounds that emanate  from this dump, and we don't lift the blinds to allow city denizens accidental glances inwards."
		}
	}
}


object television "television"
{
	nouns "tv" "teevee" "television" "telly" "screen" "" "" "" "set"
	adjective "tv" "television"
	article "the"

	size 55
	
	in entertainment_center

	is switchable, switchedon

	parse_rank 10

	long_desc
	{
		"Leary's television is a 32 or 34 inch flat screen model. It's not HDTV compatible, though, so we mainly just watch videos."
	}
	before
	{
		object DoWatch
		{
			if child(dvd_player)
			{
				run child(dvd_player).data_desc
			}
			else
			{
				"There's nothing on TV."
			}
		}
		object DoSwitchOn, DoSwitchOff
		{
			"It's not my TV, so I don't really bother turning it on or off. One of the two idiots will turn it back on immediately 
			just out of spite."
		}
	}

}


object dvd_player "DVD player"
{
	nouns "player"
	adjective "dvd"
	article "the"

	in entertainment_center
	is container
	capacity 1

	size 20

	long_desc
	{
		"Leary's DVD player is a nice wireless Apex model. Actually, I don't know that much about DVD player, so for all I know 'nice Apex model' comes
		off as well as something like, 'here's my kick-ass Ford Probe.' The player gets the job done, though, and I think Leary removed the region
		code from it."
	}
	before
	{
		xobject DoPutIn
		{
			"It's not my DVD player, so it would sort of be a breach of etiquette for me to put something in."
		}
		object DoGet
		{
			"It's plugged in too well, plus there's no real reason for me to take it, anyway."
		}
	}
}


scenery power_lines "power lines"
{
	nouns "power" "lines"
	article "the"
	in Living_Room

	long_desc
	{
		"Not much going on with the power lines. They crackle with life! Sort of."
	}
}


scenery wall_socket "wall socket"
{
	nouns "socket"

	in Living_Room

	long_desc
	{
		"It's a standard, three-prong American outlet."
	}
}


object cup "cup"
{
	nouns "cup" "glass" 
	article "a"

	in living_room_table

	size 0

	long_desc
	{
		"In this rare case, it is an actual drinking cup and not one of Criswell's athletic cups. The latter does tend to get left around the
		Living Room more frequently, though."
	}
}


object dvd_blade "Blade DVD"
{
	nouns "dvd" "disc" "movie" "film" "flick" "blade"
	adjectives "blade"
	article "the"

	in Living_Room_Table

	size 1

	long_desc
	{
		if self not in dvd_player
		{
			"It's a blue DVD-II disc with the movie \IBlade\i starring Wesley Snipes. The disc itself is a flat circle, a few inches in diameter."
		}
		else
		{
			run child(dvd_player).data_desc
		}
	}
	data_desc
	{
		"This flick has Wesley Snipes hunting down goths and vampires. Maybe just vampires. Possibly a werewolf is involved in this
		at some level, but I can't confirm it offhand."
	}
	before
	{
		object DoGet
		{
			if self in dvd_player
			{
				"It would be barbaric to remove it while it was playing, and I don't want to be like my Genghisian roommates."
			}
			else
			{
				"Taken."
				move self to Player
			}
		}
	}

}

object dvd_truman "The Truman Show DVD"
{
	nouns "dvd" "disc" "movie" "film" "flick" "truman" "show"
	adjectives "truman"
	article "the"

	size 1

	in Living_Room_Table

	long_desc
	{
		if self not in dvd_player
		{
			"It's on old-school regular DVD with \IThe Truman Show\i on it."
		}
		else
		{
			run child(dvd_player).data_desc
		}
	}
	data_desc
	{
		"The disc shows Jim Carrey not acting like a starving attention whore, but instead in some serious role. He's, like, on TV
		but doesn't know it or something. I never liked this flick."
	}
	before
	{

		object DoGet
		{
			if self in dvd_player
			{
				"It would be uncouth and barbaric to remove it while it was playing, and I don't want to be like my Genghisian roommates."
			}
			else
			{
				"Taken."
				move self to Player
			}
		}
	}

}

object dvd_rings "Lord of the Rings DVD"
{
	nouns "dvd" "disc" "movie" "film" "flick" "rings" "lord"
	adjectives "lord" "rings" "anniversary"
	article "the"

	size 1

	in Living_Room_Table

	long_desc
	{
		if self not in dvd_player
		{
			"This is the DVD of my favorite movie. I really should own it by now, but the 10 year Anniversary version of 
			the film is a bit beyond my price range."
		}
		else
		{
			run child(dvd_player).data_desc
		}
	}
	data_desc
	{
		"\IThe Lord of the Rings: The Fellowship of the Rings\i is from 2001, and features outstanding performances from
		Ian McKellen and Sean Bean. It's my favorite movie of the trilogy, and my favorite movie of all-time."
	}
	before
	{

		object DoGet
		{
			if self in dvd_player
			{
				"It would be uncouth and barbaric to remove it while it was playing, and I don't want to be like my Genghisian roommates."
			}
			else
			{
				"Taken."
				move self to Player
			}
		}
	}
}


object drywall "drywall"
{
	nouns "drywall"
	adjective "chunk"
	article "some"

	size 1

	is hidden

	long_desc
	{
		"Just a little piece of the living room wall that's separated because these ass-wandering dipshits
		keep fucking with me."

		self is hidden
	}
}


object Duffy_bed "bed"
{
	nouns "bed" "mattress"
	article "the"

	in Duffy_Bedroom

	is enterable, hidden

	size 49

	long_desc
	{	
		"My bed is just a mattress slung in the corner of the room. It reminds me of my nu-punk, hard-living lifestyle
		on a nightly basis."
	}

	before
	{
		object DoEnter
		{
			"Nobody's going to be using that bed for hours, and if I play my cards poorly tonight only one of us will be
			using it ever again."
		}
	}
}

scenery Succubus_Poster "Succubus poster"
{
	nouns "poster" "painting" "succubus"
	adjective "succubus"
	article "the"

	in Duffy_Bedroom

	long_desc
	{
		"The poster is a blown-up image of the Succubus entry in the original D&D \IMonster Manual.\i It has all her important
		stats, well, except for hips, waist and bust, I guess. But the number of attacks per round she can make and so forth
		are there. I got it a little while back and haven't hung it up yet. I had it framed, though; it's about two 
		feet square or so. It has a great deal of sentimental value, as I jerked it to this drawing every night of 
		my life except Christmas and Memorial Day from ages 13 to 15."
	}

	before
	{
		object DoHang
		{
			if self is not special
			{
				self is special
				"I place the picture up on the wall. Some guys have supermodels up to make their women feel inadequate about themselves,
				I put up a picture of some impossibly-bodied demoness. I don't think I quite have the advantage."
			}
			else
			{
				"It's already up in a place where it can destroy the greatest amount of esteem in my girlfriend's persona."
			}
		}

		object DoGet
		{
			"It's pretty unwieldy. I'm better off leaving it where it is."
		}
	}

}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Chapter Three 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

scenery emporium_room "Emporium"
{
	nouns "emporium" "room" "gamestore" "store"
	article "the"

	in MallStore1

	long_desc
	{
		Perform(&DoLookAround)
	}
}


object postcard "postcard"
{
	nouns "postcard" "card" "mail"
	adjective "post"
	article "a"
	!in MallStore1

	is quiet, readable

	is throwable

	weapon_dam_min 1
	weapon_dam_max 4

	size 1
	strength 2		! Head Shot Capable

	long_desc
	{
		if self is not special
		{
			self is special
			SetQuip(8,3,1)
			QuipsKiller(4,8,3,0)
		}

		self is not hidden

		"It's a postcard sent from a friend of Trott's.\n"
		"It reads, \I\"Greetings from New Mexico, Trotskie! Clara and I are living in a town called -- get this --
		'Rockville' of all things. It's right near Alamogordo, too, which is the city where Atari buried all those
		E.T. cartridges. I'll probably make the trip to check out the site one of these days. Clara has been completing
		her degree off the internet, and I've already cracked and released my first ware. It's great to be back in
		the loop! Keep it cool and hopefully we'll be back for a visit later this year. Try to remember to lovingly
		palm the breasts of the corpses you've been slabbing lately, bud! You know they like that. Your pal, Delarion.\"\i."
	}

	before
	{
		object DoRead
		{
			if self is not special
			{
				self is special
				SetQuip(8,3,1)
				QuipsKiller(4,8,3,0)
			}

			self is not hidden
			"It reads, \I\"Dear Trott: Greetings from New Mexico! Clara and I are living in a town called -- get this --
			'Rockville' of all things. It's right near Alamogordo, too, which is the city where Atari buried all those
			E.T. cartridges. I'll probably make the trip to check out the site one of these days. Clara has been completing
			her degree off the Internet, and I've already cracked and released my first ware. It's great to be back in
			the loop! Keep it cool and hopefully we'll be back for a visit later this year. Try to remember to lovingly
			palm the breasts of the corpses you've been slabbing lately, bud! You know they like that. Your pal, Delarion.\"\i."
		}

		object DoGet
		{
			self is not hidden
			move self to Player
			"Taken."
		}
	}
}


component GameStore_counter_lock "counter lock"
{
	nouns "lock"
	adjectives "brittle" "plastic" "shelf" "counter"
	article "the"
	part_of GameStore_counter

	parse_rank 1 

	is openable, not open, lockable, locked

	long_desc
	{
		if self is not special
		{
			"It's just a little lock placed on the counter to stop the mallrats from robbing Magic:The Gathering cards
			when we're not looking."
		}

		else
		{
			"It's just a little lock placed on the counter to stop the mallrats from stealing Magic:The Gathering cards
			when we're not looking. And, to be honest, we're almost never looking. The cheapness of the lock caused 
			it to become brittle and break when Gibs set his frosty Big Gulp drink by it."
		}
	}
}


object Magic_Cards "Magic: The Gathering cards"
{
	nouns "magic" "gathering" "cards" "card"
	adjectives "magic" "gathering" "magic:"
	article "the"

	is plural
	!in GameStore_counter

	size 5

	long_desc
	{
		"The cards are used in a game called 'Magic:The Gathering.' It's sort of like poker for nerds, except that
		the cards have special powers and so forth. I've never really gotten into it. Anyway, this is a small box
		containing wrapped packs of cards. There are about fifty or so in a box."
	}
	before
	{
		object DoOpen
		{
			"Some customers like to buy the entire box, so we're not allowed to open the box of cards unless
			we have to."
		}
	}
}


object Game_Manuals "gaming manuals"
{
	nouns "manuals" "handbooks" "book" "books" "wars" "hill" "magazine" "magazines" "battletech" "broadswords" "media" "module" "modules"
	adjective "gaming" "car" "boot" "battletech" "bras" "blondes" 
	article "some"

	size 20

	is plural, readable
	in GameStore_shelves

	long_desc
	{
		"We sell hundreds of different kinds of gaming manuals that support all manner of interests for the careful
		and particular fantasy gaming connoisseur. Car Wars (for geeks into cars), Boot Hill (for geeks into
		guns), FATAL (for geeks that are tired of their dice lying to them), Battletech (for geeks into giant robots), 
		Advanced Dungeons & Dragons (for alpha, 'classic' geeks) and Bras, Blondes, and Broadswords (for the 
		 geek who's pretty much given up ever talking to a real, live woman). I've got most of the information 
		in the manuals memorized, save for the last one, which I haven't had to get into yet. (AOL Keyword 
		being 'yet,' I guess.)"
	}
	before
	{
		object DoRead
		{
			Perform(&DoLook, self)
		}
		object DoGet, DoMove, DoPutIn
		{
			"I've got all the info contained within memorized for those games I'm into, and somewhat proud of
			myself for those games that I don't have committed to memory, if you're digging my ditch here
			(and I think you are)."
		}
	}
}


object paint_chips "paint chips"
{
	nouns "chips" "paint" "lead" "leaden"
	adjectives "paint" "lead" "leaden"
	article "some"

	size 1
	
	long_desc
	{
		"The chips are heavy little pieces of peeling lead that have flaked off the door."
	}
}


scenery GameStore_floor "floor"
{
	nouns "floor" "floorboards"
	article "the"
	in MallStore1

	is platform

	long_desc
	{
		"Most Mall stores are covered in carpet. Carpet costs MONEY, however, and therefore Benji's never
		really gone that route for either of his stores."
	}
	before
	{
		xobject DoMove
		{
			if object in Player
			{
				move object to location
				"Done."
			}
			else
			{
				"I don't have that."
			}
		}
	}
			
}


scenery Benji_register "register"
{
	noun "register" "till"
	adjective "cash" "beige" "credit" "large" "big"
	article "the"
	in MallStore1

	size 200

	key_object Academy_walls 

	is container, locked, lockable, openable, not open

	long_desc
	{
		"The cash register is beige and on the large side. They come in all shapes and sizes and I suppose I have seen a
		bunch at the Mall where I work that differ in structure and security features... Jesus, this is depressing.
		I'm a cash register expert at age 27. What have I been doing with my life?"
	}
	before
	{
		object DoUnlock
		{
			"I'd rather not get involved."
		}
	}
}


scenery GameStore_shelves "shelves"
{
	nouns "shelves" "shelving" "shelfing" "shelf" "kiosks" "kiosk"
	adjectives "skanky" "rotting" "promotional"
	article "the"
	in MallStore1

	is platform, static, known, plural
	capacity 5

	long_desc
	{
		"Benji bought up a bunch of skanky, rotting shelves from some other business here in the Mall that went
		under a while back. He moved the nice, clean ones that we had previously to his home when he was installing
		his home theatre system. These shelves have a stench to them which I'm sure probably gets into my
		clothes and on my person to a disgusting degree."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}

	}
	before
	{
		object DoSmell
		{
			"Like old wood mixed with old feet."
		}
	}
}

object Gamestore_Stool "stool"
{
	nouns "stool" "chair"
	adjective "black" 
	article "the"
	in MallStore1

	size 20
	strength 3		! Piercing

	is throwable, melee_weapon, not special, hidden, breakable, not broken, enterable

	weapon_dam_min 1
	weapon_dam_max 5

	long_desc
	{
		self is not hidden 

		"The Game Store stool is a very short and incredibly uncomfortable 4-legged stool that we prop ourselves
		on when we know that Benji isn't going to be around. ";

		if self is not special
		{
			self is special
			"(Benji is an incredibly irritating person to work for, and will yell at us if he sees us slouching
			on the stool. He is a miserable person, in this regard. ... In \Iall\i regards, really, but still.) 
			Trott once hurled the stool at me, and the thing really smarted when I got hit by the sharp
			legs of the thing. ";
		}

		""
	}
	before
	{
		object DoEnter
		{
			"The stool is really uncomfortable."
		}
	}
		
}


SuperContainer GameStore_counter "counter"
{
	nouns "counter" "ledge" "countertop"
	adjective "counter" "acrylic" "blue"
	article "the"

	in MallStore1

	is openable, not open, transparent, hidden

	list_contents
		return true

	parse_rank 2
	size 1000
	capacity 100
	

	long_desc
	{
		postcard is not hidden

		"It's an acrylic blue countertop, useful for leaning upon during the workday. We keep some media 
		inside the counter, but nothing particularly interesting or important."

		if GameStore_stool in MallStore1
		{
			GameStore_stool is not hidden

			"\nBehind the counter is a stool."
		}

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}

	}
	before
	{	
		object DoOpen
		{
			if GameStore_counter_lock is locked
			{
				"I can't, it's locked. I have no idea where the key is, either."
			}
			else
			{
				self is open
				"Done."
			}
		}

		object DoClose
		{
			if GameStore_counter_lock is locked
			{
				"I can't, it's locked. I have no idea where the key is, either."
			}
			else
			{
				self is not open
				"Done."
			}
		}

		object DoLook, DoLookIn
		{
			! Disable list_contents preempting
			self.list_contents = 0
			return false
		}

		xobject DoGet, DoPutIn
		{
			self.list_contents = 0
			return false
		}

		xobject DoGet
		{
			self is not quiet
			return false
		}

		object DoLeanOn
		{
			"Ah, that's a load off, narmean?"
		}
	}
}


object Big_Gulp "Big Gulp drink"
{
	nouns "gulp" "drink" "container" "cup" "drink" "chalice"
	adjective "big"
	article "Barnaby's"

	size 3

	long_desc
	{
		"It's sixty-four ounces of refreshing lime cola in a cup that looks like a chalice. ";
		
		if self is not special
		{
			self is special

			"The 128 ounce version of this drink is called the 'Supreme Maw Thrust' and even though it's a better
		        deal it doesn't get purchased much by many Mall denizens."
		}
		else
		{
			""
		}

		if Cold_Counter1.timer <= 4
		{
			"\nIt is cold."
		}
			
	}

	before
	{
		Object DoDrink, DoEat
		{
			"It's not mine."
		}
	}
}


object GameStore_gate "gate"
{
	nouns "gate" "bars"
	article "the"

	is not openable, open, static
	found_in Corridor1 MallStore1

	long_desc
	{
		if self is not open
		{
			"The gate to the store is made up of a bunch of flimsy horizontal bars.\n"

			"It's currently not raised."


		}

		else
		{
			"The gate to my store is made up of a bunch of linked and flimsy horizontal bars.\n"
			
			"The gate is currently raised."
		}
	}
	before
	{
		xobject DoThrowAt
		{
			if self is open
			{
				if Player in Corridor1
				{
					move object to MallStore1
					"I chuck the ";
					Art(object)
					" into my store."
				}
				else
				{
					move object to Corridor1
					"I chuck the ";
					Art(object)
					" into the hallway."
				}
					
			}
			else
			{
				if Player in Corridor1
				{
					if object in Player
					{
						move object to Corridor1
		
						CArt(object)
						" bounces off the gate with an audible slam."

					}
				}
				else
				{
					if object in Player
					{
						move object to MallStore1
		
						CArt(object)
						" bounces off the gate with an audible slam."

					}
				}
				else
				{
					"I can't do that!"
				}
			}
		}

		object DoLift
		{
			if self is open
			{
				"It's already open."
			}
			else
			{
				"I can't raise them -- they automatically lock when they are down."
			}
		}
	}
}


object Corridor1_Kiosk "informational kiosk"
{
	nouns "kiosk"
	adjective "informational" "sided" "three"
	article "the"

	is static, hidden, readable
	in Corridor1

	size 100

	long_desc
	{
		"The informational kiosk shows all the locations of all the businesses on this level of the Mall."

	}
	before
	{
		object DoRead
		{
			"From east to west, the first floor of the Mall goes as follows:\n"
			"\BBenji's RPG Emporium\n"
			"Choad's Sporting Goods - Benji's Arcade\n"
			"The Bead Store\n"
			"Jewels N' Things - Perfume Counter\n"
			"Elevator to Lower Level\b"
		}
	}
}

scenery Corridor1_Bench "brown bench"
{
	nouns "bench" "form" "pew" "seat" "settle" "stall"
	adjective "brown" "low" "small"

	is static, hidden, enterable
	in Corridor1

	size 100

	long_desc
	{
		"The brown bench allows mall denizens to take a load off their oversized, lumpy feet."
	}

	before
	{
		object DoEnter
		{
			if Chapter < 4
			{
				"I'm too busy to sit down right now."
			}
			else
			{
				MovePlayer(Corridor1_Bench)

				if self is not special
				{
					self is special

					Duffy.hitpoints+=5
					if Duffy.hitpoints > Duffy.maxhitpoints
					{
						Duffy.hitpoints = Duffy.maxhitpoints
					}

					"\nThe bench is extremely relaxing."
				}

			}
		}
	}
}


scenery "Arcade_Storefront" "Arcade"
{
	nouns "arcade" "benji's" "gameroom"
	adjective "benji's"
	article "the"

	in Corridor1

	is static, enterable

	long_desc
	{
		"The arcade is the other business that Benji owns. It's usually the source of all his problems, as he doesn't have a
		stable crew of employees like he does at the Gaming Emporium with Trott and myself."
	}
	before
	{
		object DoEnter
		{
			"There's nothing of value in the arcade, plus, the screen's down."
		}
	}
}


scenery "Corridor1_Poster" "poster"
{
	nouns "poster"
	article "the"

	long_desc
	{
		"This poster is just \ilosing it\i regarding some sale going on in the Poster Store, on the lower level of the Mall."
	}
}


scenery "Arcade_Screen" "screen"
{
	nouns "screen"
	article "the"

	in Corridor1

	long_desc
	{
		"The screen covers the entrance for the arcade. It's made of a tough, space age polymer."
	}
	before
	{
		object DoOpen, DoLift, DoPull, DoEnter
		{
			"I can't do that with the screen."
		}
	}
}








!!!!!!!!!!!!!!!!!!!!!!
! Bead Store

scenery Bead_curtains "curtains"
{
	nouns "curtain" "curtains" "beads"
	adjectives "beaded" "flimsy" "small"
	article "the"

	is plural, openable, open, not lockable

	in MallStore3

	long_desc
	{
		"The curtains are made up of tiny, strung-together plastic beads. It's flimsy and small and lets large amounts of
		light pour through, when appropriate."
	}
}

object Bead_Computer "computer"
{
	nouns "computer" "case" "processor" "pentium" "pc"
	adjectives "register" "mini-atx"
	article "the"

	in BeadStore_counter

	is platform, static

	size 51

	long_desc
	{
		if self is not special
		{
			"The register computer is run by an ancient Pentium IV-based processor within a mini-ATX case. 
			It, like all register computers, connects to the Mall hub via a serial cable in the back."
		}
		
		else
		{
			"The computer is housed within a very compact, beige mini-ATX case.\n"
			
			"There appears to be some sort of internal power source error with the computer. It won't boot."
		}
	}

	before
	{
		object DoFix
		{
			if GameEvents[6] = 0 
			{

				DoFixComputer()
			}

			else
			{
				"The computer isn't important right now."
			}
		}
	}

}

object Bead_Serial_Cable "serial cable"
{
	nouns "cable" "serial"
	adjectives "serial"
	article "the"

	in BeadStore_counter

	size 3

	long_desc
	{
		if GameEvents[6] = 0
		{
			"Hmm... it looks like it's been plugged into the computer incorrectly. I could probably fix it."
		}
		else
		{
			"It is a beige computer cord, about 12 inches in length."
		}
	}
	before
	{
		object DoGet, DoFix, DoPlug, DoPull
		{
			if GameEvents[6] = 0
			{
				DoFixComputer()
			}
			else
			{
				"The serial cable isn't important right now."
			}
		}
	}
}

object Bead_Monitor "monitor"
{
	nouns "monitor" "television" "screen"
	adjectives "black"
	article "the"

	in BeadStore_Counter

	! Blunt weapon
	strength 1
	size 12

	! Ensure that this can be thrown -- and used -- once. 
	is throwable, breakable, not broken 

	weapon_dam_min 5
	weapon_dam_max 10

	shooting_descript
	{
		self is broken

		"I blast a hole directly in the middle of the monitor."
	
	}

	long_desc
	{
		"It's a 19\" black monitor, kind of heavy but not impossibly so."
	}

}


scenery BeadStore_floor "floor"
{
	nouns "floor" "floorboards" "ground"
	prep "on" "off"
	article "the"

	in MallStore3

	is platform, enterable

	capacity 100

	long_desc
	{
		"The floor in the Bead Store is unique in the Mall as it is made out of interlocking wood panels.\n"

		"Painted into the floor is a pentagram."
	}
}


scenery BeadStore_Counter "counter"
{
	nouns "counter" "ledge" "countertop" "top" "formica" "plate"
	adjective "counter" "formica"

	in MallStore3

	is platform, static, known

	list_contents
		return true

	long_desc
	{
		"It's a generic formica countertop that separates the employees from the customers."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}

	}

	before
	{	
		object DoLook, DoLookIn
		{
			! Disable list_contents preempting
			self.list_contents = 0
			return false
		}

		xobject DoGet, DoPutIn
		{
			self.list_contents = 0
			return false
		}

		xobject DoGet
		{
			self is not quiet
			return false
		}

		object DoLeanOn
		{
			"I dunno, it just doesn't have the same feel to it as the one in my store does."
		}
	}
}


scenery BeadStore_shelves "shelves"
{
	nouns "shelves" "shelving" "shelfing" "shelf"
	adjectives "teak"
	article "the"
	in MallStore3

	is platform, quiet, static, known, plural
	capacity 5

	long_desc
	{
		"The shelves in the Bead Store are of a nice and thick quality. Teak, I think. They are mostly populate with
		boxes of non-descript little plastic beads."

		! Comment this out, as the boxes of beads won't show up properly. If the player is putting stuff on
		! the Bead Store shelf they can do a look into and see what crap they've left there. 

		!if child(self)
		!{
		!	""
		!	Perform(&DoLookIn,self)
		!}

	}
	before
	{
		object DoSmell
		{
			"The shelves smell of a rich, vibrant wood."
		}
	}
}


scenery BeadStore_beads "boxes of beads"
{
	nouns "beads" "boxes" "box"
	adjective "box" "boxes"
	article "the"

	is plural

	in MallStore3
	size 0 

	long_desc
	{
		"Countless boxes containing small beads line the shelves of the store."
	}
	before
	{
		object DoGet, MoveInto, MoveOnto, DoMove, DoPutIn
		{
			"They're worthless."
		}
	}
}

component Crystal_Ball "crystal ball"
{
	nouns "ball" 
	adjective "crystal"
	article "the"

	parse_rank 2

	part_of Ball_Stand

	strength 1

	size 0

	is melee_weapon, breakable, not broken

	weapon_dam_min 10
	weapon_dam_max 15

	long_desc
	{
		"It's a wondrously crafted sphere of rich crystal that seems to trick all the light around it into falling helplessly
		within its core."
	}
}

object Ball_Stand "crystal ball holder"
{
	nouns "stand" "crystal" "holder" 
	adjective "crystal" "ball" "wooden" "tall"
	article "the"

	parse_rank 1

	in MallStore3

	strength 1

	size 17

	is melee_weapon, breakable, not broken

	weapon_dam_min 10
	weapon_dam_max 15

	short_desc
	{
		if self in MallStore3
		{
			"Alongside the shelves is a tall crystal ball holder."
		}
		else
		{
			"There is a crystal ball holder here."
		}
	}

	long_desc
	{
		"It's a wooden stand, roughly four feet in height. It has three protruding grips on top to hold a smallish crystal
		ball (which is present). The base is circular in shape and rather thick."

		if self is broken
		{
			"\nThe stand is broken, and cannot be used effectively as a weapon."
		}	

	}

}


scenery pentagram "pentagram"
{
	nouns "pentagram" "circle"
	adjective "red"
	article "the"

	in MallStore3

	is container

	!capacity 20

	long_desc
	{
		"The pentagram looks as I would expect. Oh, I don't mean to come off as ultra-jaded: it looks like somebody who read too 
		many Hardy Boys Mysteries spray-painted a crude representation of an OMG EVIL Satanic circle."
	}
	before
	{
		object DoEnter
		{
			"I'm about 12 years too old to be even considering entering 'pentagrams.'"
		}

		xobject DoPutIn, DoGive, DoMove
		{
			if GameEvents[68] = 0
			{
				"I shouldn't put anything in the pentagram. It might ruin the stupidity or taint the nonsense
				 dweomer my girlfriend and her friends are engaged in."
			}
			else
			{
				"I have no idea what went on with the pentagram, but to play it safe I am going to
				leave it alone."
			}
		}
	}
}


object severed_head "severed head"
{
	nouns "head" 
	adjectives "bloody" "severed" "melted" "disembodied" "seeping"
	article "the"

	size 6

	! Ensure that this can be thrown -- and used -- once. 
	is throwable, breakable, not broken, hidden

	weapon_dam_min 5
	weapon_dam_max 10

	long_desc
	{
		self is not hidden

		"The head is caved in -- sort of melted and deformed. A lone eye trickles out of one of the sockets, and there is a 
		coat of fresh blood completely covering it. Skin and fat and such are sort of sloughing off it. While it
		probably belonged to some poor Mall denizen, I have no idea which one... yeah. It's nobody that I've ever seen."
	}
}

scenery mall_smoke "smoke"
{
	nouns "smoke" "air"
	article "the"

	found_in "" "" ""

	long_desc
	{
		"A great deal of smoke has entered the Mall since Sydney's transformation. It's cold to the touch, very transparent,
		and seems to shy away from all attempts at contact almost deliberately."
	}
}


scenery shotgun "shotguns"
{
	nouns "shotgun" "shotguns" "guns" "gun" "rifle" "rifles"
	article "some"
	is plural

	! this should never appear in game, but I don't want the word "shotgun" to be unknown by the parser."
}


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Chapter Four
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



object gaming_glove "gaming glove"
{
	nouns "glove" "sierra" "hobbies" "companion"
	adjective "gaming" "inky" "black" "sierra" "hobbies" "leather" "pleather"
	article "the"
	in box_backoffice
	
	is clothing

	size 1

	long_desc
	{
		"The Sierra Hobbies Gaming Glove is an inky black novelty gaming companion for the hurried Games Master. It's full of mnemonics,
		scribbled shortcuts and tables to allow for a smoother (and more stylish) game of D&D. No Dungeon Master that takes his craft
		seriously should be without!"

		if self is worn
		{
			"\nI'm currently wearing the gaming glove."
		}
	}
	before
	{
		object DoWear
		{
			if socks is worn
			{
				"I'll have to take the socks off my hands first."
			}
			else
			{
				if self not in Player
				{
					"I'll need to be holding it first."
				}
				else
				{
					self is worn
					"I slip on the thick, pleather gaming glove. I begin to feel downright sexy."	
				}
			}
		}
		object DoRead
		{
			"Mostly just to-hit tables for Dungeons and Dragons, although as an aside, apparently (according to the gaming glove)
			'Winners Don't Use Drugs.' Propaganda from the 80s was everywhere."
		}

	}

}



object box_backoffice "cardboard box"
{	
	nouns "box" "cardboard" "rotting"
	adjective "rotting" "cardboard" "crumbly"
	article "a"

	in BackOffice_shelves

	is container, quiet

	size 4

	capacity 2

	long_desc
	{
		"This cardboard is rather rotting and crumbly. I am unable to really avoid its smell, which is totally
		similar to wet garbage that just started humping a pack of wet dogs. It's sitting up on one of the shelves back 
		here."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}
	}
	before
	{
		object DoSmell
		{
			"Like wet garbage that asked out some wet dogs for a rousing round of hot summer thrusting. (\IJust\i like that.)"
		}
		object DoEat
		{
			"Not a fricking chance."
		}
		object DoGet
		{
			"It's quite sensitive -- any attempt to grab it might result in it crumbling beyond its state of wholeness."
		}
		object DoOpen
		{
			"It's already open -- in fact, the top has been ripped right off. Like it was done with a vengeance."
		}
	}
}

scenery window_backoffice "window"
{
	nouns "window" "glass"
	article "the"

	found_in BackOffice BackOffice_Hall1

	long_desc
	{
		if self is not special
		{
			self is special 

			! Allow him to ask Gibs about it 
			SetQuip(2,15,1)

			"I creep up to the window of the hallway door and take a closer look at
			it. A bloody handprint has been smeared ";

			if location = BackOffice
			{
				" upon the other side."
			}
			else
			{
				" upon this side of the window."
			}
		}
		else
		{
			"On ";
			if location = BackOffice
			{
				" the other side "
			}
			else
			{
				" this side "
			}

			"of the window is a smeared, bloody handprint."
		}
	}
	graphic "mall", "backoffice02"
}

scenery handprint "handprint"
{
	nouns "handprint" "print" "blood" 
	adjectives "bloody" "red"
	article "the"

	found_in BackOffice BackOffice_Hall1

	long_desc
	{
		if location = BackOffice
		{
		"Well, five fingers are there, and there seems to be no doubt that they were covered in blood when they were
		pressed up against the other side of the glass."
		}
		else
		{
		"Well, five fingers are there, and there seems to be no doubt that they were covered in blood when they were
		pressed up against the glass."
		}

	}
	before
	{
		object DoTouch
		{
			if location = BackOffice
			{
				"I can't touch it from this side."
			}
			else
			{
				"It's still a little wet; it hasn't quite congealed."
			}
		}
		object DoSmell
		{
			if location = BackOffice
			{
				"I can't do that from here."
			}
			else
			{
				"It doesn't smell particularly weird or anything. If I had to guess I would say that it was human
				blood, in other words."
			}
		}
		object DoTaste
		{
			if location = BackOffice
			{
				"I can't do that from here -- I need to get on the other side of the door."
			}
			else
			{
				"I dab just a bit of it and place it on my tongue. There is definitely a metallic (iron? copper? I can't
				remember what's in bloood) zing to it."
			}
		}
		object DoGet
		{
			if location = BackOffice
			{
				"I can't do that from this side."
			}
			else
			{
				"I don't have any real way of carrying the blood, besides, it's probably best if I don't coat myself with
				blood on the off chance that some sort of undead bulette or landshark is kicking about the Mall."
			}
		}
	}
}


scenery garbagehall_garbage "garbage"
{
	nouns "garbage"
	article "some"

	in BackOffice_Hall1
	is plural

	parse_rank 5

	long_desc
	{
		"There's a little bit of loose, left-over garbage kicking around, but nothing
		substantial."
	}
	before
	{
		object DoSearch
		{
			"There isn't enough garbage for a stingy pig to bathe in, much less obstruct
			or contain anything, unfortunately, as garbage usually contains real prizes, I've found."
		}
	}
}

scenery BackOffice_shelves "shelves"
{
	nouns "shelves" "shelving" "shelfing" "shelf"
	adjectives "old"
	article "the"
	in BackOffice

	is platform, quiet, static, known, plural
	capacity 5

	long_desc
	{
		"They are dual sets of old shelves that add to the claustrophobic feel of the back hallways."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}

	}
	before
	{
		object DoSmell
		{
			"Like old wood mixed with even older feet."
		}
	}
}


scenery BackOffice_lightswitch "switch"
{
	nouns "light" "lights" "switch" "lightswitch"
	adjective "light"
	article "the"

	in BackOffice

	is switchable, switchedon
	
	long_desc
	{
		"It's a common and unremarkable, albeit non-functioning, light switch."
	}
	before
	{
		object DoSwitchOn
		{
			if self is switchedon
			{
				"It's already in the 'on' position. Nothing continues to happen."
			}
			else
			{
				"Nothing happens."
			}

			self is switchedon
		}
		object DoSwitchOff
		{
			if self is  not switchedon
			{
				"It's already in the 'off' position."
			}
			else
			{

				"Click."
			}
			self is  not switchedon
		}
	}
}


scenery Mallcop_sofa "blue sofa"
{
	nouns "sofa" "couch"
	adjective "blue" "navy" "old"
	article "the"
	in BackOffice_Hall2

	is enterable

	long_desc
	{
		"It's a very old, navy blue sofa."
	}
	before
	{
		object DoSmell
		{
			"It smells like sweat and failure."
		}
	}
}


scenery Mallcop_sofa2 "floral sofa"
{
	nouns "sofa" "couch"
	adjective "yellowing" "floral" "deformed" "old"
	article "the"
	in BackOffice_Hall2

	is enterable

	long_desc
	{
		"It's a deformed single-person sofa, with a yellowing floral print."
	}
	before
	{
		object DoSmell
		{
			"It smells like old pants."
		}
	}
}


scenery Mallcop_TV "television"
{
	nouns "television" "tv"
	article "the"
	in BackOffice_Hall2

	is switchable

	long_desc
	{
		"The TV is 19\" in size or thereabouts, quite small, really. It doesn't work due to the lack of power in this
		section of the Mall."
	}
	before
	{
		object DoSwitchOn, DoSwitchOff
		{
			"There's no electricity to this section of the Mall, so it won't turn on."
		}
		object DoWatch
		{
			"I stare furiously at the blank TV screen and memorize every single last dead pixel."
		}
	}
}


scenery Mallcop_watercooler "water cooler"
{
	noun "cooler"
	adjective "water"
	article "the"
	in BackOffice_Hall2

	is container, not openable, not open 

	capacity 0 

	long_desc
	{
		"The water cooler usually holds a few gallons of water, but it's currently empty. Busting up urchins all day makes a man
		\Ithirsty\i, narmean?"
	}
}


scenery Mallcop_drink "drink"
{
	nouns "water" "drink"
	article "a"
	in Mallcop_watercooler

	long_desc
	{
		"There's nothing to drink; it's nowhere to be found."
	}

	before
	{
		object DoGet
		{
			"The water cooler is empty."
		}
	}
}


object Mallcop_pot "adobe plant pot"
{
	nouns "pot"
	adjective "plant" "adobe" "pink"
	article "the"

	in BackOffice_Hall2

	is hidden, quiet, container

	size 60

	long_desc
	{
		"It's just a generic pink pot that can store green vegetation and wildlife. It's about half a foot in diameter."
	}	
}


object Zombie_plant "potted plant"
{
	nouns "plant" "potted" "garden"
	adjective "large" "potted"
	article "the"

	in BackOffice_Hall3

	size 60

	short_desc
	{
		"There is a potted plant here."
	}

	long_desc
	{
		"It's comprised of a large potted base filled with soil, and a leafy, oversized garden plant of some 
		unknown (to me, anyway) variety."

		if GameEvents[50] = 0
		{
			GameEvents[50] = 2
			"\nTaking a closer look at the plant reveals a zombie hiding behind it!"

			if SOUND_OFF = TRUE
			{
			}
			else
			{
				PlaySound("ndmusic", "yeargh", sound_volume, false, true)	
			}

			LocationState[8] = 4 

			move Zombie2 to backoffice_hall3
		}
	}

}


scenery BOHall3_lightswitch "switch"
{
	nouns "light" "lights" "switch" "lightswitch"
	adjective "light"
	article "the"

	in BackOffice_Hall3

	is switchable, switchedon
	
	long_desc
	{
		"It's a common and unremarkable light switch."
	}
	before
	{
		object DoSwitchOn
		{
			if self is switchedon
			{
				"It's already in the 'on' position. Nothing continues to happen."
			}
			else
			{
				"Nothing happens."
			}

			self is switchedon
		}
		object DoSwitchOff
		{
			if self is  not switchedon
			{
				"It's already in the 'off' position."
			}
			else
			{

				"Click."
			}
			self is  not switchedon
		}
	}
}


scenery lockers "lockers"
{
	noun "locker" "lockers"
	adjective "set" "gray" "dull"
	article "the"

	in Security_Room

	is plural, container, openable, not open 

	capacity 10

	long_desc
	{
		"A single set of dull gray lockers that the mallcops use to put stuff in when they are out hassling urchins,
		toadies and skateboarders."
	}

	after
	{
		object DoOpen
		{
			"It takes a fair bit of force, but I'm a fairly forceful guy."
		}
	}
}

object health_drink "health drink"
{
	noun "drink" "wheat" "grass" "ginseng" "gingko" "box"
	adjective "wheat" "grass" "ginseng" "gingko" "health"
	article "the"

	in lockers

	long_desc
	{
		"This health drink is contained in a little, self-consumable drink box. According to the contents listing,
		it contains wheat grass, ginseng and gingko. According to my own personal autobiography on life, it contains
		a wholly disgusting cacophony of competing and unappealing fluids."
	}
	after
	{
		object DoDrink
		{

			"I throw the container away after I finish it. It's terrible, natch."

			remove self

			Duffy.hitpoints+=10

			if Duffy.hitpoints > Duffy.maxhitpoints
			{
				Duffy.hitpoints = Duffy.maxhitpoints
			}
		}
	}
}


object phone "phone"
{
	nouns "walkie" "talkie" "cb" "radio" "phone" "trott" "trotskie" "cell" "cellphone"
	adjectives "walkie" "cb"
	article "the"

	is switchable, switchedon, living, do_not_drop_off_rail

	parse_rank 1

	long_desc
	{
		"The phone is a handheld communications device, sort of like a CB radio, or a walkie talkie, that
		is always dialed into one person. Trott, in this case. (I can talk to him by just speaking into
		the device when it's on.)"

	}
	before
	{
		object DoHit
		{
			"Grraahh! I'm still pretty pissed off about the breakup of Ma Bell!"
		}
		object DoTalk
		{
			if self is not switchedon
			{
				"It's turned off."
			}
			else
			{

				"\B[Speaking to Trott on the phone...]\b"

				Perform(&DoTalk,Trott)
			}
		}
		object DoKiss
		{
			"Well, it's certainly in need of a good sanitizing now."
		}
	}
}


object choadgate "gate"
{
	nouns "gate" "bars" "screen" "fence" "chains" "links" "gates" "balustrade" "rampart"
	adjective "chain" "linked" "metal" "interwoven"
	article "the"

	is openable, not open, static
	found_in Corridor2 MallStore2

	long_desc
	{
		if self is not open
		{
			"The gate to the Sporting Goods store is made up of a focused interweave of chain links. It's pretty
			crazy, I know. Stores other than the one that employs me have a theory on security not inspired by
			free range forest kender -- like this one. The gates are actually effective at keeping people out and
			would probably resist any violence directed towards it.\n"

			"It's currently not raised."


		}

		else
		{
			"The gate to the Sporting Goods store is made up of a bunch of interwoven chain links.\n"
			
			"The gate is currently raised."
		}
	}
	before
	{
		xobject DoThrowAt
		{			
			if choadgate is open
			{
				if Player in Corridor2
				{
					move object to MallStore2
					"I chuck the ";
					Art(object)
					" into Choad's Sporting Goods Store."
				}
				else
				{
					move object to Corridor2
					"I chuck the ";
					Art(object)
					" into the corridor."
				}
			}

			else
			{
				if Player in MallStore2
				{
					if object in Player
					{
						move object to MallStore2

						CArt(object)
						" bounces off the gate with an audible \Isk-flang!\i"
					}
					else
					{
						move object to Corridor2

						CArt(object)
						" bounces off the gate with an audible \Isk-flang!\i"
					}
				}
				else
				{
					"I can't do that!"
				}
			}
		}

		object DoLift, DoOpen, DoPull
		{
			if self is open
			{
				"It's already open."
			}
			else
			{
				"I can't raise them -- they automatically lock when they are down."
			}
		}
		object DoPush
		{
			"Pushing on them turns out to be a pretty futile gesture."
		}
	}
}

object circular_rack "circular jacket rack"
{
	nouns "jacket" "rack"
	adjective "circular" "jacket"
	article "the"

	is container
	in MallStore2

	is throwable, breakable

	weapon_dam_min 4
	weapon_dam_max 8

	short_desc
	{
		"There is a circular jacket rack here."
	}

	long_desc
	{
		"The circular rack is about four and a half feet high and has a number of down and ski
		jackets attached to it, all the way around."
	}
}


scenery ski_jackets "ski jackets"
{
	nouns "ski" "skiing" "jackets" "jacket"
	adjective "skiing" "ski"
	article "some"

	part_of circular_rack

	is plural
	in MallStore2


	long_desc
	{
		"Several goosedown ski jackets are attached to the circular jacket rack. More or less permanently,
		as they need a crypto key to be used to get them off and only store employees would have 
		them."
	}
	before
	{
		object DoGet
		{
			"They are essentially permanently part of the circular jacket rack."
		}
	}
}


scenery choad_hangers "hangers"
{
	nouns "hangers"
	article "the"

	is plural
	in MallStore2

	long_desc
	{
		"The hangers are made up of a tough plastic that serves as the first line of defense against urchins and kleptos. It's
		unlikely that I'll find anything that will be able to break them."
	}
}


scenery Corridor2_counter "counter"
{
	nouns "counter" "tabletop" "table" "bench" "board" "counter" "pulpit" "sideboard"
	adjective "front" "gray"
	article "the"
	in Corridor2

	is platform, quiet, static, known

	capacity 10

	size 49

	long_desc
	{
		"Some of the stores have tables on the outside, in an attempt to entice customers to come inside. This
		table is one of them, for Choad's Sporting Goods Store. Usually only extremely cheap items are set on
		them, so as to minimize shortages and loss."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}
	}
}


scenery security_window "window"
{
	nouns "window" "glass"
	article "the"

	between Security_Room Security_Far

	long_desc
	{
		if security_blinds is not open
		{
			"I can't see through the window right now. The blinds are closed."
		}
		else
		{
			if Nurse in Security_Far
			{
				if self is not special
				{
					self is special
					"On the other side of the window is some poor girl who has been affected with zombieism... 
					(Okay, I don't know what the scientific term is here -- cognitive necroticism of some sort?
					Not sure. I'm.. I'm just gonna go with zombieism.)"
				}
				else
				{
					"On the other side of the window is some poor girl who has been affected with zombieism.
					Beyond that, there's little else but darkness as this section of the Mall is across from some
					gravel pits that they haven't been able to pave over."
				}
			}
			else
			{
				"There's little other than a vast expanse of darkness on the other side of the window."
			}
		}
	}
}


scenery security_curtains "floral curtains"
{
	nouns "curtains" "curtain"
	adjective "plaid" "flowery" "floral"
	article "the"

	is plural, openable, not open

	in Security_Room

	long_desc
	{
		"The floral curtains are something that Security added to the room to spice it up a little. They don't cover
		a window (the blinds on the other side of the room do that) and can not be opened or closed."
	}
	before
	{
		object DoOpen, DoClose
		{
			self is not open
			"The curtains can't be opened or closed. They, like nipples on a gorgon, are there just for decoration."
		}
	}
}


scenery console "console"
{
	nouns "console" "dashboard" "controls" "switchboard" "controls"
	article "the"
	in Security_Room

	is switchable, platform, open

	long_desc
	{
		"The console has a wide array of switches and buttons. I know a lot about the Mall, but I wouldn't have
		the first idea on how to operate this thing."
	}
	before
	{
		object DoSwitchOn, DoSwitchOff, DoMove
		{
			"That's really more Trott's area of expertise. He can help me raise gates when necessary."
		}
	}
}


component console_buttons "buttons"
{
	nouns "buttons" "switches" "button" "switch"
	adjective "blue"
	article "some"

	part_of console

	is switchable, plural

	long_desc
	{
		"Many of them are blue, except for the ones that are not."
	}
	before
	{
		object DoSwitchOn, DoSwitchOff, DoMove
		{
			"That's really more of Trott's area of expertise. He can help me raise gates when necessary."
		}
		object DoPush
		{
			"The button-pushing is better off left to Trott."
		}
	}
}


scenery security_chair "leather chair"
{
	nouns "chair" "recliner"
	adjective "leather" "comfy"
	article "the"

	in Security_Room

	is platform, not enterable

	capacity 15
	size 60

	long_desc
	{
		"The leather chair looks to be rather comfortable. I had a leather chair at my apartment once, but one of Pang's
		friends had sex in it with some skank when I was out of town, and the think was covered with sweat and mud and
		corpsepaint (long story) so I threw it out. This one seems to be free from such disadvantages."
	}
	before
	{
		object DoEnter
		{
			"I've got too much going on to lounge about in comfy leather chairs."
		}
		object DoGet
		{
			"The chair's too heavy for me to take."
		}
	}
}

	
scenery security_computer "computer"
{

	nouns "computer" "case" "processor" "pentium" "pc" "monitor" "components" "keyboard" "system"
	adjectives "mini-atx" "computer"
	article "the"

	in Security_Room

	long_desc
	{
		"Trott's computer system is made up of a monitor, case and keyboard, but collectively they allow him to visit
		MorgueReport.org and keep up on the latest updates concerning slabs, gurneys and formaldehyde."
	}
	before
	{
		object DoFix
		{
			"There isn't anything to fix on this particular computer."
		}
	}
}

scenery security_blinds "blinds"
{
	in Security_Room

	is openable, not open, plural

	nouns "blinds" "drapes" "drapery" 
	article "the"

	long_desc
	{
		"The blinds are about three feet long, gray and ";

		if self is not open
		{
			"closed"
			GameEvents[13] = 1
		}
		else
		{
			"open."
		}
	}

	after
	{
		object DoOpen
		{
			if self is not special
			{
				self is special
				"I open the blinds and reveal a zombie! "
				CharExclaim(Trott, ExclaimArray[3])
				SetQuip(8,14,1)					! Trott

				move remote_nurse to Security_Room

				Activate(Nurse_Screeches)

			}
			else
			{
				"I open the blinds."
				move remote_nurse to Security_Room

				Activate(Nurse_Screeches)
			}


			LocationState[13] = 2
		}
		object DoClose
		{
			"I shut the blinds, trying to get that thing out there out of my mind."
			remove remote_nurse

			LocationState[13] = 1

			Deactivate(Nurse_Screeches)
		}
	}
}


object socks "socks"
{
	nouns "socks" "sock"
	adjective "wool" "yellow" "yellowish" "pair"
	article "some"
	in Corridor2_counter
	
	is clothing, plural, known

	size 1

	long_desc
	{
		"They are a yellowish pair of bulky wool socks."

		if self is worn
		{
			"\nThey are on my hands, and serve as serviceable mittens."
		}
	}
	Before
	{
		object DoSmell
		{
			"They are fresh-smelling; like the air after a late evening spring rain."
		}
		object DoWear
		{
			if gaming_glove is worn
			{
				"They'd really only be useful to me as mittens -- but I'll have to remove the gaming glove first to wear
				them."
			}
			else
			{
				if self not in player
				{
					"I'll need to be holding them first."
				}
				else
				{
					self is worn
					"I already have a decent pair of socks, so I place them over my hands and use them as mittens. 
					The Mall is freezing, anyway."
				}
			}
		}
	}
}


scenery kiosk "makeup kiosk"
{
! The kiosk's state is determined soley by whether it is open or not 
! It is made open in the wraith daemon 

	noun "kiosk" "store"
	adjective "makeup"
	article "the"

	is container, quiet, static, known, locked, lockable, not open, openable 

	in Corridor4

	long_desc
	{
		"The makeup kiosk is a business that operates in a very small rectangle in the middle of the Mall corridor.
		Girls (and in this town, a not-insignificant number of goth guys) stop by to pretty themselves up for 
		their dates and/or midnight angstings."

		if Chapter > 3 and kiosk is not open
		{
			"\nWhen the kiosk is active, one can get a facial, a manicure and a new fragrance. Earrings,
			bracelets and necklaces aren't sold here, though, as there is apparently some sort of Treaty 
			of Tordesillas thing going on with the Jewelry store to the north."
		}

		if self is open
		{
			"\nIt looks like the intense cold of the wraith passing through the kiosk caused the
			thing to crack open."

			if child(self)
			{
				!""
				Perform(&DoLookIn,self)
			}
		}
	}

	before
	{
		object DoClose
		{
			"I can't do that to the kiosk -- the wraith damaged it too much for that."
		}
	}
}


scenery MallStore4_counter "tabletop"
{
	nouns "counter" "tabletop" "table" "bench" "board" "counter" "pulpit" "sideboard" "display" 
	adjective "front" "gray"
	article "the"
	in MallStore4

	is platform, transparent, open

	capacity 10

	long_desc
	{

		"The Jewelry Store tabletop is just a normal counter, from behind which the employees ring up
		the customers."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}
	}
}


object purse "pleather purse"
{
	noun "purse" "bag" "carryall" "handbag" "moneybag" "pouch" "sack"
	adjective "leather" "black" "faux" "pleather"
	article "a"

	is container, quiet, openable, open
	capacity 3

	in MallStore4_counter

	long_desc
	{
		"It's one of those cheap, black pseudo-leather purses that you can get in any Imitation Fabric Store in America."

		if self in Player
		{
			if child(self)
			{
				!""
				Perform(&DoLookIn,self)
			}
		}
	}
	after
	{
		object DoLookIn
		{
			MakeShadowAppear()
		}
	}
}


object silver_comb "silver comb"
{
	noun "comb"
	adjective "silver" "silvery" "wedding"
	article "the"

	is valuable, throwable, melee_weapon

	weapon_dam_min 3
	weapon_dam_max 3

	in purse

	strength 4

	size 2

	long_desc
	{
		if self is not special
		{

			"Huh. ";
		}
		
		"It's a silvery wedding comb, the kind that brides normally wear over their hair in Judeo-Christian wedding ceremonies. ";

		if self is not special 
		{

			self is special 

			"Actually, I have no idea if Jewish brides wear these things or not. Or Catholic ones. Okay, I've been to
			one wedding in my life, and it was a Presbyterian one. The bride wore it for that. Anyway. ";
		}

		"It's probably quite valuable; it's definitely quite beautiful. Judging by what the average Mall worker makes, the thing
		is probably stolen."
	}
	after
	{
		object DoGet
		{
			"Got it. Ooh, silvery!"

			ScoreArray[40] = 1

			MakeShadowAppear()

		}
	}
}


object safebox "safebox"
{
	nouns "safebox" "cabinet" "safe" "box" "section"
	adjective "big" "large" "towering"
	article "the"

	is container, lockable, locked, not open, openable, quiet, known, static, hidden

	in MallStore4

	size 100

	long_desc
	{
		"This is a towering cabinet, in which all the valuable jewelry is kept when the store closes down at night. It is
		about seven feet tall and compartmentalized into different sections, one of which I can get to easily at my own
		relatively meager height.\n"

		if self is open
		{
			"It's open."
		}
		else
		{
			"It is closed."
		}
	}

	before
	{
		object DoGet
		{
			"The safebox easily weighs several hundred pounds, while I can easily carry almost several hundred
			pounds less than that. It's almost synergy."
		}
		object DoUnlock
		{
			"I can't unlock it on my own. The lock, while not incredibly sturdy, is still more than what I
			can crack on my own."
		}
		object DoOpen
		{
			if safebox_lock is special
			{
				self is open
				"Done -- it's open."

				if child(self)
				{
					!"" 
					Perform(&DoLookIn,self)
				}
			}
			else
			{
				"I can't open it on my own. The lock, while not incredibly sturdy and powerful, is still more than
				I can crack on my own."
			}
		}
	}
}


component safebox_lock "safebox lock"
{
	nouns "lock"
	adjective "cheap" "plastic" "brittle" "safebox"
	article "the"

	part_of safebox

	long_desc
	{
		"It's a cheap, plastic lock that is attached to the safebox."

		if self is special
		{
			"\nIt is broken."
		}
	}
	before
	{

		object DoHit, DoKick, DoThrowAt, DoShoot
		{
			"The lock is especially designed to be impervious to any and all brute attacks."
		}
		object DoPull
		{
			"Pulling on the lock doesn't get me anywhere."
		}
	}
}


object handful_rings "handful of silver rings"
{
	nouns "rings" "ring" 
	adjective "handful" "handfull" "silver" "silvery"
	article "the"

	is plural, valuable, throwable

	in safebox

	is melee_weapon 

	strength 4

	weapon_dam_min 5
	weapon_dam_max 6

	size 3


	long_desc
	{
		"The rings are an assortment of hoops, studs, brackets, pendants and attachable beads made, hopefully, out
		of pure silver. There are about a handful of them, altogether."
	}
}


scenery ledge "guardrail"
{

	nouns "ledge" "extension" "outthrust" "overhang" "prolongation" "protrusion" "ridge" "rail" "railing" "wood" "overhang" "terrace" "guardrail"
	adjectives "mounted" "wood" "overhang" "guard"
	article "the"

	is ledgelike

	in Corridor4

	long_desc
	{
		"The guardrail is a long strip of mounted wood, about five feet in height, that stops youngsters from falling 
		off the second level of the Mall. The elevator can be used to get to the first level in a much safer personal
		manner."
	}
	before
	{
		object DoLookUnder, DoLookOver, DoLookThrough
		{
			"I take a look over the guardrail and see what's lurking on the first floor of the Mall below. It's rather dark,
			but I can make some things out. There is a marble statue present, which has been placed in the center of the
			corridor. ";

			if ghast.hitpoints > 0
			{
				"I can also detect some movement, but it's difficult to say just what -- the noxious, burning smell in
				the area indicates that a ghast might be running loose down below, however. I'd definitely
				want to neutralize that odor before going to the first level of the Mall."
			}
			else
			{
				"There doesn't seem to really be anything else down there."
			}
		}
	}
}


scenery look_down "down"
{
	nouns "down" "below"

	in Corridor4

	parse_rank 10

	long_desc
	{
		Perform(&DoLookUnder, ledge)
	}
}



object xbox1 "X-box"
{
	nouns "x-box" "box" "game" "xbox" "unit"
	adjectives  "video" "microsoft" "cardboard" "game"
	article "the"

	is platform, throwable, breakable, openable, not open

	in Corridor2

	size 38

	weapon_dam_min 1
	weapon_dam_max 8

	strength 5

!\
OK, I really wanted an initial description, not a short one. But this code is useful, because getting the newlines
straight has been such a giant pain in the ass. 
	short_desc
	{
		if self in Corridor2
		{
			"In the corner of the front of the Arcade is an X-box game console."
		}
		else
		{
			"There's an X-box here."
		}
	}
\!

	initial_desc
	{
		"\nIn the corner of the front of the Arcade is an X-box game unit."
	}

	long_desc
	{
		"It's a very old video game unit. I believe it first hit the market in 2001 or 2002. It's also incredibly
		fricken huge. Looks like over a cubic meter of gaming anger to me. Physically, the box depicts all the games
		you can play on the thing in a green and black color scheme."

		if self is not special
		{
			self is special
			"\nBenji (the same guy who is my boss as well) keeps them outside the Arcade in some attempt to entice
			customers sick of the arcade experience into buying a larger-ticket item. Either that, or they are placed
			outside the arcade to balance the weight of the dozen, ancient, hulking arcade games inside 
			it. Either / or."
		}

		if self is broken
		{
			"\nIt is badly broken."
		}
	}

	before
	{
		object DoPlay
		{
			"It's still in the box. (I should probably leave it that way, as Benji will still want to sell it
			someday.)"
		}
		object DoOpen
		{
			"I should really avoid opening the box, mostly because I don't want to lose anything that comes with it,
			but partly because lifting this monster in its entirety makes me feel like a \Breal\b man."
		}
		object DoThrowAt
		{
			! This was placed here as a kludge: need to check it against the far ghast 
			if xobject.charnumber = 100
			{
				if location = Corridor4 and ghast.hitpoints > 0  
				{
					"I heave the X-box off the ledge, but manage to time it perfectly for when the ghast 
					emerges from beneath the first level. The X-box hits it square in the back and manages
					to cave in its chest from behind. The ghast makes a sound not unlike a balloon deflating
					and is pulped into the hard floor of the Mall. The thing's head comes clean off and
					goes bouncing down the corridor.\n"

					"\"Life is short,\" I say, somehow remembering what the old console's advertising slogan 
					was, \"So play hard, stinky.\""

					self is broken 

					move self to Corridor5

					remove remote_ghast

					move ghast_head to Mall_Exit

					ghast.hitpoints = -101

					ScoreArray[12] = 1
				}
				else
				{
					DoThrowAt

				}
			}
			else
			{
				DoThrowAt
			}
		}
	}
}


object perfume_bottle "bottle of perfume"
{
	nouns "perfume" "bottle" "scent" "flask" "phial" "vial"
	adjectives "perfume" 
	article "a"

	in kiosk

	long_desc
	{
		"This bottle of perfume is a fairly large container of the Elizabeth Arden perfume 'True Love' 
		(A feminine scent that is a blend of lotus, iris and jasmine, recommended for office wear.)\n"

		"A girl who worked at my D&D store for a season used to wear this scent, and it was all I could
		concentrate on. She'd erode my sense of smell regarding all else within a minute of beginning her 
		shift."
		
	}
	before
	{
		object DoThrowAt
		{
			select(xobject.charnumber)
			case 100
				{
					DoDropOffLedge()
				}
			case 99
				{
					DoThrowAtFarHallway()
				}
			case 98
				{
					DoThrowAtStatue()
				}
			else
				{
					if location = Corridor4 and Corridor4 is special
					{
						DoThrowPerfumeGeneral()
					}
					else
					{
						"I don't think that would provide any tactical advantage for me."
					}
				}


		}
		object DoSpray
		{
			"I spray just a bit of perfume into the air. Sexy!"
		}
		xobject DoSprayIndirect
		{
			if object = Audrey
			{
				Audrey is perfumed
				"\"Hey, I'm not your Barbie doll!\" exclaims Audrey as I give her a hit of \ITrue
				Love.\i"
			}
			elseif object = Casey
			{
				Casey is perfumed
				"\"Jarret, don't!\" says Casey, \"You're messing up my foundation!\""
			}
			elseif object = Barnaby
			{
				Barnaby is perfumed
				"\"Knock it off, dammit,\" says Gibs."
			}
			else
			{
				"I spray a bit of the perfume on it. Sek-sai!"
			}
		}

		object DoSprayOn
		{
			if xobject = Audrey
			{
				Audrey is perfumed
				"\"Hey, I'm not your Barbie doll!\" exclaims Audrey as I give her a hit of \ITrue
				Love.\i"
			}
			elseif xobject = Casey
			{
				Casey is perfumed
				"\"Jarret, don't!\" says Casey, \"You're messing up my foundation!\""
			}
			elseif xobject = Barnaby
			{
				Barnaby is perfumed
				"\"Knock it off, dammit,\" says Gibs."
			}
			else
			{
				"I spray a bit of the perfume on it. Sek-sai!"
			}
		}
	}
	after
	{
		object DoGet
		{
			"Got it."
			ScoreArray[10] = 1
		}
	}

}


scenery Far_Hallway "hallway"
{
	nouns "hallway" "corridor" "floor"
	adjective "far"
!	in 

	! Used for the perfume bottle to react correctly 
	charnumber 99 

	long_desc
	{
		"I can only see a few feet into the hallway from here."
	}
}


scenery hanging_posters "wall posters"
{
	nouns "poster" "posters" "wall" "marley" "branch" "lute" "walls"
	adjectives "hanging" "bob" "michelle" "levitation" "wall"
	article "the"

	in Poster_Store

	is plural

	long_desc
	{
		"The ones hanging up are rather muted. There's one really sexy one of Michelle Branch, which would probably drive
		Gibs into the screaming mimis, as that's the kind of girl and music that he digs. Plus, they both share a pirate
		fetish, but that's a whole 'nother story. There is also one of Bob Marley looking to his left that was used on 
		the cover of his 'Legend' album (which I recall also hangs in an office in Interpol except there is a red circle
		and diagonal line through it) and then one of some guy playing a lute while levitating, which is somehow much, much cooler than its 
		description would imply."
	}
}


scenery fliprack "flip-rack posters"
{
	nouns "rack" "flip" "flip-rack" "fliprack" "posters" "poster"
	adjective "flip" "flip-rack" "rack"
	article "the"

	in Poster_Store

	is switchable

	parse_rank 1

	long_desc
	{
		if GameEvents[29] = 0
		{
			"There isn't a poster in the slot currently, but if I turn the flip rack, I am sure to see one."
		}

		if GameEvents[29] = 1
		{
			"The first poster in this set depicts a kind of ritual. There is a red pentagram on the floor, 
			and a bunch of pilgrims, quakers or hippies holding hands around it. (I can never really differentiate
			between the three.) It's eerily reminiscent of the attempt at an invoking performed earlier by Audrey, Gibs, 
			Syd and Casey... \IRelatively speaking,\i anyway, as encountering a wraith and zombie tonight has 
			raised the scale for what I will consider 'eerie' in the future."

			ScoreArray[17] = 1
		}

		if GameEvents[29] = 2
		{
			"The second poster shows a ghost -- a child's rendition of a spirit, really, with looming, evil eyes
			and a reversed teardrop shape. It's emerging from some other world or dimension inside the pentagram."

			ScoreArray[18] = 1
		}

		if GameEvents[29] = 3
		{
			"Er, this poster is actually one of Samantha Fox pouring milk all over herself in the shower."
		}

		if GameEvents[29] = 4
		{
			"This poster seems to be by the same artist as the other two, but rather than being drawn 
			from a bird's eye perspective like those posters, it is a close-up of a young boy reading passages 
			from a thick, craggily book. Locks of the boy's hair descend over his glasses and he's decked
			out all in black, wrapped in a weary and somber expression."

			ScoreArray[19] = 1
		}
		if GameEvents[29] = 5
		{
			"The fourth poster in this set shows a little girl with her eyes downcast. She is drinking from
			a radiant, glowing urn. The girl is wearing a silvery dress and has a key around her neck."

			ScoreArray[20] = 1

			if GameEvents[77] = 0
			{
				GameEvents[77] = 1
				CharExclaim(Audrey, ExclaimArray[8])
			}


		}
		if GameEvents[29] = 6
		{
			GameEvents[30] = 1 

			"The second-to-last image is of a person from the first poster surrounded by numerous lit candles.
			There are seemingly millions of candles in the scene, and it's almost like an optical illusion,
			as the 'negative space' for certain candles comprise many separate ones when viewed in a
			different way. No candle seems to have a single, identifiable color (or rather, they seem to include
			all possible colors) and one can only really make out a single flame glowing serenely upon them."

			ScoreArray[21] = 1
		}

		if GameEvents[29] = 7
		{
			if RubbleState[1] = 0
			{
				RubbleState[1] = 1

				COLOR LIGHT_MAGENTA
				"\IyousTayaWayyouSI\BC\bKLITTLEBOY!!\i\n"
				COLOR TEXTCOLOR
			}

			"The last scene shows vibrant fire all over the edges, and the subjects all seem burned to a
			crisp. There is no sign of the ghost, but the bodies of the boy, the girl, and all their
			compatriots are viciously chunked and charred. It's a beautiful little bit of art, regardless of how horrible the
			scene it depicts, and how terrible the ulcer is that begins to grow in my stomach."

			ScoreArray[22] = 1
		}

	}
	Before
	{
		object DoSwitchOn
		{

			if GameEvents[29] = 7
			{
				GameEvents[29] = 0

				"I flip the posters in the rack all the way back to the start."
				return true
			}

			else
			{
				GameEvents[29] = GameEvents[29] + 1

				"I flip to the next poster in the series and take a look at it.\n"

				Perform(&DoLook, self)
			}
		}
	}
}


object glasses "glasses"
{
	nouns "glasses" "specs" "frames" "eyeglasses" "goggles" "peepers" "rims" "spectacles" 
	article "my"

	is clothing, do_not_drop_off_rail
	size 0

	long_desc
	{
		"My glasses have gone from being in style to out with such regularity that I don't even notice any longer.
		If geek chic is in these days then I'm all set. If not, at least I can see well."
	}
	before
	{
		object DoDrop
		{
			"I can't drop my specs! They are a valuable information-gathering tool!"
		}
		object DoTakeOff
		{
			"I can't remove my specs like that! They are a valuable information-gathering tool!"
		}
		object DoWear
		{
			if shades is worn
			{
				shades is not worn
				"I take off the shades and put my specs on."
			}
			else
			{
				if self not in player
				{
					"I'll need to be holding them first"
				}
				else
				{
					self is worn
					"I put my specs back on."
				}
			}
		}

	}
}
	

object shades "mirrored shades"
{
	nouns "shades" "sunglasses" 
	adjective "mirrored"
	article "the"

	is clothing, plural

	in hut_case

	size 1

	long_desc
	{
		"They are circular frames, with perfect mirrors on the outside. My eyes are completely
		hidden while wearing the sunglasses, at the expense of a lot of light getting through."
	}

	before
	{
		object DoWear
		{
			if glasses is worn
			{
				glasses is not worn
				"I take off my glasses and put the shades on. Things get considerably darker."
			}
			else
			{
				if self not in player
				{
					"I'll need to be holding them first,"
				}
				else
				{
					self is worn
					"I put the shades on."
				}
			}

		}
		object DoTakeOff
		{
			if self is worn
			{
				self is not worn
				"Removed. ";

				if glasses in Duffy
				{
					glasses is worn
					"I put my regular glasses back on."
				}
				else
				{
					""
				}
			}
			else
			{
				"I'm not wearing the shades."
			}
		}

				
			
	}
	after 
	{
		object DoGet
		{
			"Got it."
			ScoreArray[13] = 1
		}
	}

}


scenery hut_case "center display case"
{
	nouns "case" "display" "cabinet" "chiffonier" "escritoire" "locker" 
	adjectives "center" "glass" "display"
	article "the"

	parse_rank 10

	in Sunglasses_Hut

	is openable, not open, transparent, container, static, quiet, breakable

	long_desc
	{
		"The center display case shows off the discounted pair of glasses that the store is most desperately
		trying to move. This usually stems from some celebrity slagging on a particular make or model on the
		Internet or in FHM Magazine or something. The world of retailing sunglasses is about as catty and
		Machiavellian as the green room to a Miss Sorority USA contest right before the on-stage drama 
		reading."		

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}
	}
	before
	{
		object DoOpen
		{
			if self is open
			{
				"It's already as open as it's gonna get."
			}
			else
			{
				"It steadfastly refuses to open. Violence may in fact be the
				answer to this one."
			}
		}
		object DoHit, DoKick
		{
			if self is not broken
			{
				self is broken
				self is open

				"I give the case a good whack, and it opens with ease."
			}
			else
			{
				"I think I've already done enough damage to the display case. (It's already open,
				I should mention.)"
			}
		}
	}
}


object cupid_statue "cupid statue"
{
	nouns "cupid" "statue" "eros" "cupido" "amor" "cherub" "baby" "marble"
	adjective "winged" "sculpted" "marble" 
	article "the"

	charnumber 98 

	parse_rank 1

	is platform

	size 1000

	in Corridor5

	initial_desc
	{
		"\nIn the center of the corridor is a sculpted marble statue."
	}

	long_desc
	{
		"It's a nicely-sculpted, eight-foot marble work of the mythological god of love. Cupid (known as Eros in Greek myth) was
		often depicted as being a winged baby or cherub that would just start freaking out and begin slinging arrows at people
		so they would indulge in a torrent of romance, love and sex.\n"
		
		"This statue was commissioned by the guy who owns and rents out the Mall, from a student at the local art college. Cupid's
		in a pose where he seems to be taking deadly aim at people."
	}
	before
	{
		object DoPush
		{
			"I try, but get nowhere. I make a mental note to start hitting the gym when I get out of here."
		}
	}
}

scenery symbols "symbols"
{
	nouns "symbols" "etchings" "inscriptions"
	article "some"

	is plural

	part_of fountain

	long_desc
	{
		"I can't really say that I know what they say with 100% accuracy, because I happen to read extremely well in English
		and simply do not have the time or cause to dilute my expertise with the various other moon languages spoken
		by others on this planet. I know a little Portuguese and Latin, however. \n"

		"Some Mall urchins have defaced a little bit of it, but the general gist of it implores all who read to raise
		whatever half-breed, half-species offspring that are created by trysts that earth women have with the Gods as
		if they were one's own. It goes on to say something touching about faith in fellow man, a request to not
		adulterize, no drinking, driving, shooting and swearing on the Sabbath ... and then the graffiti takes over
		and we're all religiously informed that Sarah Abbot of Fort Upton sucks thick cocks."
	}
		
	before
	{
		object DoRead
		{
		"I can't really say that I know what they say with 100% accuracy, because I happen to read extremely well in English
		and simply do not have the time or cause to dilute my expertise with the various other moon languages spoken
		by others on this planet. I know a little Portuguese and Latin, however. \n"

		"Some Mall urchins have defaced a little bit of it, but the general gist of it implores all who read to raise
		whatever half-breed, half-species offspring that are created by trysts that earth women have with the Gods as
		if they were one's own. It goes on to say something touching about faith in fellow man, a request to not
		adulterize, no drinking, driving, shooting and swearing on the Sabbath ... and then the graffiti takes over
		and we're all religiously informed that Sarah Abbot of Fort Upton sucks thick cocks."
		}
	}
}


object fountain "fountain"
{
	nouns "fountain" "bubbler" "fount" "geyser" "inception" "lode" "pump" "reservoir" "spring" "wellhead" "wellspring"
	adjective "beautiful"
	article "the" 

	parse_rank 1

	is container, enterable, hidden
	capacity 100 
	size 1000

	in Corridor6

	long_desc
	{
		"The fountain is rich limestone artifact that was discovered years ago in a poured-over closet in Italy and 
		flown out here at great expense. It has been converted from its original state as a Renaissance-era commissioned 
		sculpture to a marketing tool for the Mall.\n"

		"It's about six feet at the base and rather shallow -- water would only come up to one's ankles in its normal, calm
		state. The spout extends a couple of feet up from the dead center of the base. There are a few inscriptions and symbols
		on the thing, but nothing I can decipher." 		

		if child(self) 
		{
			"" 
			WhatsIn(self)
		}
	}

	before
	{
		object DoDrink
		{
			Duffy.hitpoints+=5

			if Duffy.hitpoints > Duffy.maxhitpoints
			{
				Duffy.hitpoints = Duffy.maxhitpoints
			}

			"It's quite refreshing... I'd never really drank from the fountain before today. But it's delicious."
		}
			
	}
	after
	{
		object DoEnter
		{
			if ghast.conscious = 1 and ghast in location
			{
				GameEvents[35] = 1 

				ghast.hitpoints = -101

				ScoreArray[12] = 1

				remove ghast
				remove remote_ghast

				move ghast_head to Mall_Exit

				LocationState[16] =0

				"The ghast throws a wild slash my way, but I avoid it and step backwards into the pool.\n"

				"The thing momentarily hesitates entering itself. I feign a right jab. It had been staggering
				along just fine until now, but it cautiously considers taking a single step inside the fountain
				to join me.\n"
				
				"The ghast places its left foot into the fountain. Before it can even make solid contact with the
				fountain's base there is an emphatic sizzling. The flesh coming in contact with the water begins
				to boil away.\n"

				"I take a step back and avoid the splutter of liquefying flesh. The ghast tries to take a step
				forward to support its weight, but that doesn't work and it flails its arms out to the side before
				falling down, face-first, towards the water. Its able to break a bit of the fall with its hands,
				but only briefly until they, too, begin disintegration.\n"

				"The ghast's hands are quickly evaporated into ichor and carbon. It's then supported by its forearms,
				then elbows. I intercede. I slink forward and lift its chin up just a bit. With the beast's head
				tenuously attached to the neck, I give it a mock salute.\n"

				"\"A new High Score in customer satisfaction for the City Water Authority,\" I say. I boot the
				ghast's head clear off its neck and get enough leg on it to send it airborne into the darkness ahead."

				if Barnaby.hitpoints <= 0
				{
				Barnaby.hitpoints = Barnaby.maxhitpoints
				Barnaby is following 

				"\nCasey runs over to Barnaby and shakes him a few times. He groggily comes back into consciousness.
				I hear him mutter something like 'who fricking laid one?' I wink at Audrey, who is starting to breath
				regularly again with the ghast out of the picture."
				}
			}
			else
			{
				"Entered!"
			}
		}
	}

}

scenery corridor7_gate "gate"
{
	nouns "gate" "bars" "screen" "fence" "chains" "links" "gates" "balustrade" "rampart"
	adjective "chain" "linked" "metal" "interwoven" "record" "store"
	article "the"

	in Corridor7

	is openable, not open

	long_desc
	{
		"The gate is made up of interwoven metal links, but due to the lack of power over here it can't
		be opened."
	}
	before
	{
		object DoOpen
		{
			"I can't do that to the gate."
		}
	}
}









object rubble01 "chunk of rubble"
{
	nouns "chunk" "rubble"
	adjective "chunk"
	article "a"

	in Corridor7

	is throwable, hidden 

	weapon_dam_min 2
	weapon_dam_max 4

	size 21

	long_desc
	{
		"It seems to be constructed of the cheap concrete that was poured onto the roof of the Mall a few
		years back."
	}
	after
	{
		object DoGet
		{
			"Done."
			self is not hidden
		}
	}
}


scenery rubble02 "wall of rubble"
{
	nouns "wall" "rubble"
	adjective "wall"
	article "the"

	in Corridor8

	long_desc
	{
		"The wall of rubble is stopping us from progressing any farther to the west. The rubble seems to have descended
		from chunks of the ceiling, which allows a little more moonlight to seep through and illuminate the area,
		but the way the concrete fell, it's really broken up into small sections and cracks up top."
	}
}


scenery cement_wall "cement wall"
{
	nouns "wall" "cement" 
	adjective "impenetrable"
	article "the"
	in Corridor9

	long_desc
	{
		"Funnily enough, this cement is of much stronger stock than used in the actual construction of the Mall itself.
		The wall is about thirty feet long and completely covers up the entrance to what was once the Outlet Tech
		SuperStore. (The SuperStore pretty much failed three months ago when the owners, a married couple of 
		American Indians from Pueblo, left under circumstances that I never got the gossip on.)"
	}
}


object novel_shelf "shelves"
{
	nouns "shelves" "shelving" "shelfing" "shelf"
	adjectives "brown" "wooden"
	article "the"

	is plural, platform, static, quiet, hidden
	capacity 30
	size 200

	in Book_Store

	long_desc
	{
		"The novel store shelves are about six feet high and made of medium-grade sanded woodstock."
	}
}

object cross "cross"
{
	nouns "cross" "crucifix" "boards" "wood"
	adjective "wooden" "couple" 
	article "the"

	in Book_Store

	is melee_weapon, breakable, platform, transparent, quiet_bcast

	weapon_dam_min 1
	weapon_dam_max 10

	strength 3

	size 51

	initial_desc
	{
		if dead_girl in self
		{
			"\nNailed to a couple of boards in the far corner of the room is a girl."
		}
		else
		{
			"\nIn the corner of the room is a discarded wooden cross."
		}
	}


	long_desc
	{
		"The cross runs about six feet high, wide enough for a grown woman to be nailed to and made of some
		sort of indeterminate wood."

		if self is not special
		{
			"\nThere is a dead girl nailed to it."
		}
	}

}


scenery Nutrition_Store_Shelf "shelf"
{
	nouns "shelfs" "shelf" "shelves"
	article "the"
	in Nutrition_Store

	is platform

	long_desc
	{
		"The shelf is a good six or seven feet long, with a finished dark stain."

		if child(self)
		{
			!"" 
			Perform(&DoLookIn,self)
		}
	}
}


scenery Nutrition_Glass "glass"
{
	nouns "glass" "pane"
	adjective "glass"
	article "the"
	in Nutrition_Store

	long_desc
	{
		"The glass pane separates that which happens within the store and that which happens without it. Or something."
	}
	before
	{
		object DoBreak, DoHit, DoKick, DoShoot
		{
			"But!! This is \BINNOCENT\b glass!"
		}
	}
}


scenery Nutrition_Register "register"
{
	nouns "register"
	article "the"
	in Nutrition_Store

	long_desc
	{
		"It's one more in an endless parade of registers that are probably filled with cash that would solve all my financial problems,
		only I don't know how to get to it. Oh, well, stealing is wrong anyway."
	}
}



scenery Nutrition_Basement1_walls "walls"
{
	nouns "wall" "walls"
	adjectives "west" "east" "western" "eastern"
	article "the"
	in Nutrition_Basement1

	is plural

	long_desc
	{
		"The walls at this stretch of the basement are a bit craggily, but otherwise wholly unremarkable."
	}
	before
	{
		object DoTouch, DoHit, DoKick, DoMove
		{
			"Nothing happens to this particular section of the basement walls."
		}
	}
}


scenery Nutrition_Basement2_walls "walls"
{
	nouns "wall" "walls"
	adjectives "west" "east" "western" "eastern"
	article "the"
	in Nutrition_Basement2

	is plural

	long_desc
	{
		if self is not special
		{
			self is special
			move skulls1 to Nutrition_Basement2

			LocationState[9] = 1

			Activate(Reset_Nutrition_Store_Graphic)

			"I step over to the wall and take a closer look. I touch the side of the wall as it's difficult
			to tell exactly how far away from it I am -- and as soon as I make contact, dust jumps from 
			the wall into the air and causes a bright flash of light! I'm blinded for a moment.\n"
			
			"My eyes quickly adjust, but in the meantime I sense that the walls are made out of something
			rather smooth and rounded down. Upon the return of my sight, I see that the walls are in
			fact made out of skulls.\n"

			"I think they're human. I can't really tell for certain.The skulls are interlocked and although 
			they do not make up the walls \Ientirely\i (they rest on blocks that reach about a foot off the 
			ground) they... well, certainly make up the worst parts."

			if ((mummy in location) or (mummy is following)) and mummy.conscious = 1
			{
				mummy  is paralyzed
				mummy is not following
				move mummy to Nutrition_Basement2
				fight_active = 0
				mummy.peaceful = true

				"\nThe mummy howls in pain by the flash of light!"

				Activate(Mummy_Becomes_Unparalyzed)

			}
		}
		else
		{
			"The walls contain a network of locked-in human(?) skulls, turning this place into a true catacomb."
		}
	}
	before
	{
		object DoHit, DoKick, DoShoot
		{			
			move skulls1 to Nutrition_Basement2

			LocationState[9] = 1

			Activate(Reset_Nutrition_Store_Graphic)

			if self is not special
			{
				self is special
				"As soon as I attempt to make contact with the walls, the dust clinging forth scatters into
				the air, causing a bright flash of light! My eyes take a moment to adjust, but in doing
				so I can tell that whatever the walls are made of are round, possibly sanded down,
				with quite the careful craftsmanship... \n"

				"My eyesight returns. The walls are made out of interlocking human skulls. Quality craftsmanship
				indeed: it's downright divine. (I presume they're human, but in all honesty, I can't really
				tell for certain.) The skulls make up most of the wall, but they are locked together upon
				stone blocks that reach about a foot off the ground."

				if human_skull is hidden
				{
					human_skull is not hidden
					move human_skull to location

					"\n(A skull comes loose from the wall.)"
				}
	
				if mummy in location and mummy.conscious = 1
				{
					mummy is paralyzed
					mummy is not following
					move mummy to Nutrition_Basement2
					fight_active = 0
					mummy.peaceful = true

					"\nThe mummy howls in pain by the flash of light!"

					Activate(Mummy_Becomes_Unparalyzed)

				}
			}
		
			else
			{
				"Touching the wall causes a brief flash of intense, retina-scarring light."

				if mummy in location and mummy.conscious = 1
				{
					mummy is paralyzed
					mummy is not following
					move mummy to Nutrition_Basement2
					fight_active = 0
					mummy.peaceful = true

					"\nThe mummy howls in pain by the flash of light!"

					Activate(Mummy_Becomes_Unparalyzed)

				}
			}
		}

		object DoTouch, DoMove
		{
			
			move skulls1 to Nutrition_Basement2

			LocationState[9] = 1

			Activate(Reset_Nutrition_Store_Graphic)

			if self is not special
			{
				self is special
				"As soon as I attempt to make contact with the walls, the dust clinging forth scatters into
				the air, causing a bright flash of light! My eyes take a moment to adjust, but in doing
				so I can tell that whatever the walls are made of are round, possibly sanded down,
				with quite the careful craftsmanship... \n"

				"My eyesight returns. The walls are made out of interlocking human skulls. Quality craftsmanship
				indeed: it's downright divine. (I presume they're human, but in all honesty, I can't really
				tell for certain.) The skulls make up most of the wall, but they are locked together upon
				stone blocks that reach about a foot off the ground."
	
				if mummy in location and mummy.conscious = 1
				{
					mummy is paralyzed
					mummy is not following
					move mummy to Nutrition_Basement2
					fight_active = 0
					mummy.peaceful = true

					"\nThe mummy howls in pain by the flash of light!"

					Activate(Mummy_Becomes_Unparalyzed)

				}
			}
			else
			{
				"Touching the wall causes a brief flash of intense, retina-scarring light."

				if mummy in location and mummy.conscious = 1
				{
					mummy is paralyzed
					move mummy to Nutrition_Basement2
					mummy is not following
					fight_active = 0
					mummy.peaceful = true

					"\nThe mummy howls in pain by the flash of light!"

					Activate(Mummy_Becomes_Unparalyzed)

				}
			}
		}
	}
}


scenery skulls1 "skulls"
{
	nouns "skulls" "skull"
	adjective "human" "row"
	article "the"
!	in Nutrition_Basement2

	is plural

	parse_rank 1
	
	long_desc
	{
		if self is not special
		{
			"I can barely make out their color, but they appear to be brown. They look of somewhat tough
			construction, but I am hardly an expert on how hard skull plating is.\n"

			"One is sticking out a bit more than the others from the western wall. I might be able to
			loosen it."
		}
		else
		{
			"I can barely make out their color, but they appear to be brown. They look of somewhat tough
			construction, but I am hardly an expert on how hard skull plating is."
		}
	}
	before
	{
		object DoLoosen, DoGet
		{
			if human_skull is hidden
			{
				human_skull is not hidden
				move human_skull to Player

				"I manage to pry a skull out of the wall. It's extremely lightweight, polished and round."
			}
			else
			{
				"I can't get anything else from the row of skulls."
			}
		}
		object DoHit, DoKick, DoShoot
		{
			if human_skull is hidden
			{
				human_skull is not hidden
				move human_skull to location

				"I knock a single skull out of the wall. It falls onto the ground and rolls to a stop."
			}
		}
		object DoSmell
		{
			"The skulls smell mostly like dust, at this point."
		}
		object DoTaste
		{
			"The skulls taste thick, gritty... rough, mostly."
		}
	}
			
}


object human_skull "crumbling skull"
{
	noun "skull"
	adjective "crumbling"
	article "the"

	is hidden, throwable, breakable, talkable

	parse_rank 2 

	weapon_dam_min 2
	weapon_dam_max 4

	size 3

	long_desc
	{
		"The skull appears to be a fair bit smaller than mine. I suspect that it may have originally been from a
		child of some sort. (Better that than an imp or leprechaun or something, I guess.) The jawbone is missing
		and very tiny bits of rotting flesh are still around on the skull itself; the flesh hasn't completely
		disintegrated away, although most of it definitely has."
	}
	before
	{
		object DoHit, DoKick
		{
			"Nah."
		}
		object DoAskQuestion
		{
			if fight_active = 0
			{
				"\"Alas, poor Yorick! I knew him, Horatio...\""
			}	

			else
			{
				"The skull's got no advice on this one."
			}
		}
		object DoSmell
		{
			"This particular skull has no discernable scent."
		}
		object DoTaste
		{
			"It has a flavor which is rather tart to my tongue."
		}
		
	}		
}



object salve_jar "ointment jar"
{
	noun "jar" "container" "box"
	adjective "ointment"
	article "the"

	is container, openable, not open
	in Nutrition_Store_Shelf

	size 1

	long_desc
	{
		"The ointment jar is made of indestructible plastic and is bright purple with the 
		words \"GENERAL OINTMENT\" present in yellow block letters. If I remember correctly,
		this stuff is good at fighting sickness and other sorts of disease."
	}

}

object salve "salve"
{
	noun "salve" "goo"
	adjective "viscous"
	article "some"

	in salve_jar

	size 0

	long_desc
	{
		"Looking at it, the salve appears to be gooey and viscous, like transparent molasses."
	}
	before
	{
		object DoSmell
		{
			"It's putrid -- sharp, nasty and repulsive."
		}
		object DoTaste
		{
			"Eugh! That's downright filthy."
		}
		object DoApply, DoPutIn
		{
			if xobject is rotting 
			{
				remove salve

				if xobject = Duffy
				{
					"I apply the salve to myself, hoping to stave off the rotting."
					Duffy is not rotting
					Deactivate(Rotting_Disease)

					Duffy.hitpoints += 10
					if Duffy.hitpoints > Duffy.maxhitpoints
						Duffy.hitpoints = Duffy.maxhitpoints
				}
				else
				{
					"I apply some of the salve."
					Duffy.hitpoints += 10
					if Duffy.hitpoints > Duffy.maxhitpoints
						Duffy.hitpoints = Duffy.maxhitpoints
				}
			}
			else
			{
				"I apply a little of the salve, but nothing seems to happen and it quickly evaporates."
			}
		}
	}
}


scenery jars "jars"
{
	noun "jars" "bottles" "pills" "bottle"
	adjectives "jars"
	is plural
	in Nutrition_Store

	long_desc
	{
		if self is not special and salve_jar in Nutrition_Store_Shelf
		{
			self is special

			"I take a quick look at the shelves and spot a jar of ointment. It catches my eye as its decked out
			in a bright purple label with the word 'GENERAL OINTMENT' in a canary Impact font. If I remember
			my general health studies classes, stuff like this has good disease-fighting capabilities."
		}
		else
		{	
			"Aside from the salve, there's really nothing else of note. I'm not trying to shed lots of weight
			or fix odd moods or anything."
		}
	}
	before
	{
		object DoBreak
		{
			"Such senseless violence in a high-class establishment like this!"
		}
	}
}


scenery nutrition_counter "counter"
{
	noun "counter"
	in Nutrition_Store

	is platform
	capacity 20

	long_desc
	{
		"This smooth, treated plastic counter is towards the back of the store, in front of a steel door. "
	}
}


object torch "torch"
{
	noun "torch" "rags" "blaze" "fire" "flame"
	adjective "flaming" "fiery"
	article "the"

	!Item is special if it is still on the wall 

	is quiet, breakable, not special 
	in bracket

	shooting_descript
	{
		!run self.before.xobject.DoThrow
	}

	long_desc
	{
		if self is not special 
		{
			"The torch is about twenty feet up in the air, held close to the west wall by a bracket. It's far beyond what
			I could jump to or access directly. The flame on the torch is rather slight, hardly really licking out into the 
			darkness, so I'm guessing that the rags wrapped around the base are almost out of soaked oil."
		}
		else
		{
			"The torch is no longer lit, having been overcome by the intense cold of the coffin room."
		}
	}
	before
	{
		object DoGet
		{
			if object is not special
			{
				"It's too far up."
			}
			else
			{
				move torch to Player
				"Got it."
			}
		}

		xobject DoThrowAt
		{
			if object ~= water_1 and object ~= balloon1 and object ~= glasses and object ~= shades
			{
			!object is throwable
			move object to location

			if object is breakable
				object is broken

			if object is worn
				object is not worn

			if self is not special
			{
				self is special
				self is broken

				"I knock the torch off of the bracket! The torch ";

				if mummy in location and mummy.conscious = 1
				{
					!Perform the mummy's horrible death
					mummy.hitpoints = -101
					mummy.conscious = 0
					fight_active = 0
					mummy.peaceful = TRUE					

					ScoreArray[26] = 1

					"plummets to the ground, but on the way down it strikes the mummy! The mummy quickly
					catches fire and lets out a set of horrible screams. It begins to flail about wildly,
					but I'm able to stay out of its way. Within moments the fire consumes most of the mummy
					and I give the charred skeletal and bandage bits that are left a helpful kick.\n"

					"The mummy is reduced to extinguished, dusty chunks."
				}
				else
				{
					"falls to the ground, where the cold fog quickly extinguishes it. "
				}
			}
			else
			{
				"Nothing interesting happens."
			}
			}!object is throwable
			else
			{
				if self is not special
				{
					"That wouldn't have any effect if I threw it up there!"
				}
				else
				{
					"That wouldn't accomplish anything."
				}
			}
		}
	}			
}


scenery alcove_far "alcove"
{
	noun "alcove"
	article "the"

	in Nutrition_Basement3

	long_desc
	{
		"It's a very small and hidden away subsection of the basement. It's to the east."
	}
	before
	{
		object DoEnter
		{
			MovePlayer(Nutrition_Basement4)
		}
	}
}


scenery bracket "bracket"
{
	noun "bracket"
	adjective "wall"
	article "the"

	is breakable, transparent, open, enterable, container
	in Nutrition_Basement3

	reach bracket

	long_desc
	{
		"It's a very small piece of metal designed to keep the torch in place along the wall."
	}

	before
	{
		object DoOpen, DoMove, DoTouch, DoHit, DoKick 
		{
			"The bracket is too far away for me to get my greasy paws on it."
		}
		object DoEnter
		{
			"I've got as much chance as entering this bracket as I do a middle-income
			tax bracket."
		}
		xobject DoThrowAt
		{
			if object ~= water_1 and object ~= balloon1 and object ~= glasses and object ~= shades
			{!object is throwable
			move object to location

			if object is breakable
				object is broken

			if object is worn
				object is not worn

			if torch is not special
			{
				torch is special
				torch is broken

				"I knock the torch off of the bracket! The torch ";

				if mummy in location and mummy.conscious = 1
				{
					!Perform the mummy's horrible death
					mummy.hitpoints = -101
					mummy.conscious = 0
					fight_active = 0
					mummy.peaceful = TRUE					

					ScoreArray[26] = 1

					"plummets to the ground, but on the way down it strikes the mummy! The mummy quickly
					catches fire and lets out a set of horrible screams. It begins to flail about wildly,
					but I'm able to stay out of its way. Within moments the fire consumes most of the mummy
					and I give the charred skeletal and bandage bits that are left a helpful kick.\n"

					"The mummy is reduced to extinguished, dusty chunks."
				}
				else
				{
					"falls to the ground, where the cold fog quickly extinguishes it. "
				}
			}
			else
			{
				"Nothing interesting happens."
			}
			}!object is throwable
			else
			{
				if torch is not special
				{
					"Throwing that wouldn't have any effect!"
				}
				else
				{
					"That wouldn't accomplish anything."
				}
			}
		}
	}
}	


object Menorah "menorah"
{
	nouns "menorah" "holder"
	adjectives "white"
	article "the"
	in Candle_Countertop

	is container, quiet, not special, transparent, open

	capacity 9

	size 1

	long_desc
	{
		"The menorah has places for nine candles -- one for each day of Hanukkah, and then one candle which is the Shamash,
		which is used to light the other candles once per day for each day of the holiday. This menorah is made out of 
		brass and ";
		
		if self is not special
		{
			"does not appear to have had any attention or cleaning in quite some time."
		}
		else
		{
			"appears to have been recently polished."
		}

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}
	}
	before
	{
		object DoGet
		{
			if RubbleState[3] = 0
				{
					RubbleState[3] = 1

					COLOR LIGHT_MAGENTA
					"\IoUTOUTboysickchildOUT\BNO\bNO\BNO\bNO\BNO\bNONO!!!\i\n"
					COLOR TEXTCOLOR
				}

			move self to Player
			"I take it."

			ScoreArray[15] = 1
		
		} 

		object DoPolish
		{
			self is special

			"The menorah gets a little brighter."
		}
		xobject DoMove, DoPutIn
		{
			if object is not candle_type
			{
				"That's not meant for the menorah."
			}
			else
			{
				move object to self
				"Done."
			}
		}
	}
}


scenery Candle_Countertop "long display table"
{
	nouns "countertop" "counter" "display" "table" "formica" "plate"
	adjective "platform" "display" "long" "formica" "plate"
	article "the"
	in Candle_Store

	is platform

	long_desc
	{
		"The display table is a sort of countertop, approximately fifteen feet long and about three feet deep. 
		It is made out of a hard plastic, faced off with a chipping formica plate."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}
	}
}


scenery candle_boxes "boxes of candles"
{
	nouns "candles" "box" "boxes"
	adjective "boxes"
	article "some"
	in Candle_Store

	is plural

	long_desc
	{
		"These boxes contain reams of cheap, short blue birthday candles."
	}
	before
	{
		object DoGet
		{
			"There's too many to gather up, and those candles in the menorah are longer, sturdier and more
			interesting to boot."
		}
		object DoBurn
		{
			"That would be a disaster."
		}
	}
}


object crimson_candle "crimson candle"
{
	noun "candle"
	adjective "red" "crimson"
	article "the"

	in Menorah

	is candle_type

	size 1

	long_desc
	{
		"It's a simple, long, crimson candle."
	}
	before
	{
		object DoSmell
		{
			"It doesn't have a scent."
		}
		object DoBurn
		{
			if lighter in Player
			{
				"The candle doesn't seem to want to catch fire. Just my luck... I have encountered a magic no-burn candle in
				this hellhole."
			}
			else
			{
				"I can't."
			}
		}
	}
}


object cyan_candle "cyan candle"
{
	noun "candle"
	adjective "cyan"
	article "the"

	in Menorah

	is candle_type

	size 1

	long_desc
	{
		"It's a simple, long, cyan candle."
	}
	before
	{
		object DoSmell
		{
			"It doesn't have a scent."
		}
		object DoBurn
		{
			if lighter in Player
			{
				"The candle doesn't seem to want to catch fire. It's irritatingly willful about it, too."
			}
			else
			{
				"I can't."
			}
		}
	}
}


object jade_candle "jade candle"
{
	noun "candle"
	adjective "jade"
	article "the"

	in Menorah

	is candle_type

	size 1

	long_desc
	{
		"It's a simple, long, jade colored candle."
	}
	before
	{
		object DoSmell
		{
			"It doesn't have a scent."
		}
		object DoBurn
		{
			if lighter in Player
			{
				"The candle doesn't seem to want to catch fire. I'm sure when I find one that does it will be green with envy."
			}
			else
			{
				"I can't."
			}
		}
	}
}


object umber_candle "umber candle"
{
	noun "candle" "umber"
	adjective "umber" "burnt"
	article "the"

	in Menorah

	is candle_type

	size 1

	long_desc
	{
		"It's a simple, long candle colored umber."
	}
	before
	{
		object DoSmell
		{
			"It doesn't have a scent."
		}
		object DoBurn
		{
			if lighter in Player
			{
				"The candle doesn't seem to want to catch fire. I don't think it likes being umber."
			}
			else
			{
				"I can't."
			}
		}
	}
}


object indigo_candle "indigo candle"
{
	noun "candle"
	adjective "indigo"
	article "the"

	in Menorah

	is candle_type

	size 1

	long_desc
	{
		"It's a simple, long, indigo candle."
	}
	before
	{
		object DoSmell
		{
			"It doesn't have a scent."
		}
		object DoBurn
		{
			if lighter in Player
			{
				"The candle doesn't seem to want to catch fire. It's as if it's willing itself not to."
			}
			else
			{
				"I can't."
			}
		}	
	}
}


object canary_candle "canary candle"
{
	noun "candle"
	adjective "canary"
	article "the"

	in Menorah

	is candle_type

	size 1

	long_desc
	{
		"It's a simple, long, canary colored candle."
	}
	before
	{
		object DoSmell
		{
			"It doesn't have a scent."
		}

		object DoBurn
		{
			if lighter in Player
			{
				"The candle doesn't seem to want to catch fire. Not quite sure why it cares either way, but there you go."
			}
			else
			{
				"I can't."
			}
		}
	}
}


object black_candle "black candle"
{
	noun "candle"
	adjective "black"
	article "the"

	in Menorah

	is candle_type

	size 1

	long_desc
	{
		"It's a simple, long, black candle."
	}
	before
	{
		object DoSmell
		{
			"It doesn't have a scent."
		}
	
		object DoBurn
		{
			if lighter in Player
			{
				"The candle doesn't seem to want to catch fire. Remarkable, Captain."
			}
			else
			{
				"I can't."
			}
		}
	}
}


object slate_candle "slate candle"
{
	noun "candle"
	adjective "slate"
	article "the"

	in Menorah

	is candle_type

	size 1

	long_desc
	{
		"It's a simple, long, candle colored slate."
	}
	before
	{
		object DoSmell
		{
			"It doesn't have a scent."
		}
		object DoBurn
		{
			if lighter in Player
			{
				"The candle doesn't seem to want to catch fire. Hmm."
			}
			else
			{
				"I can't."
			}
		}
	}
}


scenery garlic_shelf "shelf"
{
	noun "shelf" "board" "counter" "ledge" "trestle" "plank"
	adjective "beige" "plank"
	article "the"

	is platform
	capacity 3

	in Nutrition_Basement1

	long_desc
	{
		if garlic not in self
		{
			"It's a beige, plank shelf stocked with absolutely no freaking garlic! Unbelievable."
		}
		else
		{
			"It's a beige, plank shelf stocked with garlic only because I personally put some there. Pfaw."
		}
	}
}

SuperContainer garlic_trestle "trestle"
{
	noun "shelf" "board" "counter" "ledge" "trestle" "plank"
	adjective "rotting" "old"
	article "the"

	inherits scenery
	is not openable open

	capacity 3

	in Nutrition_Basement4

	long_desc
	{
		"In the corner of the alcove is a single trestle. It's obviously rotting away, and emitting a little bit
		of an old musty smell. It stands about two feet high and looks as if it might crumble at any time."

		if child(self)
		{
			""
			WhatsIn(self)
		}
	}
}


scenery "support_beam" "support beam"
{
	noun "beam" "pole" 
	adjective "support"
	article "the"

	in Nutrition_Basement3

	long_desc
	{
		"The support beam is a strong and long block of stone keeping the ceiling up nice and high."
	}
	before
	{
		object DoClimb
		{
			"I can get a little ways up, but the beam becomes highly polished and without any sort
			of ridges to hold onto or place my feet within about two or three feet up."
		}
		object DoKick
		{
			"Freeee-\Iow!!\i"
		}
		object DoHit
		{
			"Even if these beam had a 'keystone' -- which it doesn't -- and I could find it -- which
			I can't -- if I were to knock it apart the beam and the ceiling would crush me to death."
		}
	}
}

object coffin_lid "lid"
{
	noun "lid"
	adjective "lid" "coffin"
	article "the"

	size 500

	parse_rank 1


	long_desc
	{
		"The coffin lid is about six and a half feet long, three feet wide and a good eight or nine inches deep. 
		It's made out of rough stone, but of a type filled with flecks of highly reflective metal. The stonework
		is strictly functional, as there are several gashes and lines in the lid and it hardly even approximates
		a smooth surface anywhere that I can see."
	}
	before
	{
		object DoKick
		{
			"Trying to strike the lid, at least, would only cause a broken foot."
		}
		object DoHit
		{
			"Attacking the lid of the coffin would be a futile gesture."
		}
		object DoPush, MoveInto, MoveOnto, DoPull
		{
			if self in coffin
			{
				"The lid is preposterously heavy. I doubt a team of slobbering orcs could even move it if
				the coffin underneath contained a cubic meter of rat pie."
			}
			else
			{
				"It's far too heavy for me to push around."
			}
		}
	}

}


scenery "dried_blood" "dried blood"
{
	noun "blood" "scab" "scabs"
	adjective "dried" "flecks" "fleck"
	article "the"

	in Nutrition_Basement3

	long_desc
	{
		"Just little flecks of dried scabs that have accumulated around the far end of the coffin."
	}
}

SuperContainer coffin "coffin"
{
	noun "coffin" "casket" "catafalque" "box" "pall" "drage" "sarcophagus"
	adjectives "funerary" "pine"
	article "a"

	is openable, not open, transparent

	list_contents
		return true

	size 1000

	parse_rank 2

	capacity 100


	in Nutrition_Basement3

	long_desc
	{
		self.article #1 = "the"

		"The coffin is made out of some kind of stone-like substance that I am not altogether familiar with. 
		It's like a chiseled and well-grooved offshoot of pyrite. It nevertheless reflects light quite well,
		and practically shimmers down here in the basement, excepting those bits of it flecked with dried blood."
	}
	before
	{

		object DoKick, DoHit
		{
			if mummy in self
			{
				if GameEvents[61] = 0
				{
					GameEvents[61] = 1
					"I give the coffin a blast -- it's made up of really thick stone, but I don't knock it
					hard enough to injure myself. I \Iam\i momentarily surprised to hear something begin
					rumbling around inside, however. I don't think I want to be here whenever's in there gets
					out and presumes (correctly, admittedly) that it's me that disturbed its slumber."

					Activate(Mummy_Agitated)
				}

				else
				{
					"I've already managed to agitate whatever's knocking about in there."
				}
			}
			else
			{
				"Ow!"
			}
		}

		

		object DoPush
		{
			"I could never muster enough strength to push the lid off, much less the push the coffin itself 
			around."
		}
		object DoOpen
		{
			if coffin_lid in coffin
			{
				"I try to push the lid off the coffin, but I am unable to do so."
			}
			else
			{
				"It's already open."
			}
		}
		object DoClose
		{
			if coffin_lid in coffin
			{
				"It's already closed -- the lid's on."
			}
			else
			{
				"I can't do that to the coffin."
			}
		}
	}
}


object garlic "garlic clove"
{
	noun "garlic" "clove"
	adjective "garlic"
	article "a"

!	in garlic_trestle

	size 1

	long_desc
	{
		"The clove is little bigger than a cat's eye marble, and rotting to boot. I don't think that the slavering,
		fanged undead will be the only occupant of the Mall that I'll be able to keep away from me, seeing how
		badly this thing reeks."
	}
	before
	{
		object DoEat
		{
			if Mall_Exit is not visited 
			{
				"This probably would do more good if it was not getting an acid bath within my
				ulcerous stomach."
			}
			else
			{
				remove self

				"What the heck! I won't make friends this way, but nobody around here is too friendly anyhow. Gulp!"
			}
		}
		object DoSmell
		{
			"It stinks. It would anyway, natch, but Mother Nature allowing the thing a lengthy round of rotting 
			has managed to make it even funkier. ";

			if self is not special
			{
				"Scale is really difficult to communicate, but it smells worse than a sub-$100 \Iair 
				conditioner\i after a week's use, even!"
			}
			else
			{
				""
			}
		}
	}
	after
	{
		object DoGet
		{
			self.article #1 = "the"

			ScoreArray[37] = 1 

			if GameEvents[56] = 0 and location = Nutrition_Basement4
			{
				GameEvents[56] = 1
				Activate(Mummy_Awakens)
				move self to Player

				"I take the garlic."
			}
			else
			{
				"Got it."
				move self to Player
			}
		}
	}
}


object fluorescent_light "fluorescent light"
{
	noun "fluorescent" "light" "lamp" "fixture"
	adjectives "fluorescent" 
	article "a"

	in Food_Court1

	is breakable, throwable 

	size 35

	weapon_dam_min 1
	weapon_dam_max 10

	strength 5	! Crushing

	long_desc
	{
		"This light fixture is from a chunk of the Mall's ceiling. It's at least a couple feet long, and mostly cylindrical in shape. 
		It's non-functioning, of course, and quite heavy."
	}
}

object garbage_can "garbage can"
{
	noun "can" "bin" "bucket" "canister" "crate" "receptacle" "tub"
	adjectives "garbage" "grey" "gray" "plastic" "big" "cruddy"
	article "a"

	in Food_Court1
	is container, throwable 
	capacity 10
	
	size 10

	weapon_dam_min 1
	weapon_dam_max 3

	long_desc
	{
		"It's a typical Mall garbage can (big, gray, plastic and cruddy)."

		if child(self)
		{
			!"" 
			Perform(&DoLookIn,self)
		}

	}
}

object foodcourt_table1 "brown table"
{
	noun "shelf" "board" "counter" "ledge" "trestle" "plank" "table" "tabletop"
	adjectives "brown" "long"
	article "a"

	in Food_Court1
	is platform
	capacity 10

	size 26

	long_desc
	{
		"This table is a longish one, six or seven people could sit on a single side of it and eat comfortably."
	}
}

object foodcourt_table2 "short gray table"
{
	noun "shelf" "board" "counter" "ledge" "trestle" "plank" "table" "tabletop"
	adjectives "grey" "short" "gray" "round" "circular"
	article "a"

	in Food_Court1
	is platform

	capacity 10

	size 26

	long_desc
	{
		"This table is one of the smaller ones in the food court, ideal for four (and only four) teenage girls to roll their eyes 
		around."
	}
}

object plastic_chair "plastic chair"
{

	nouns "chair" "plastic"
	adjectives "plastic" "white"

	article "a"

	in Food_Court1

	is platform

	long_desc
	{
		"It's a one-piece white plastic chair, designed for slovenly types to sit endlessly upon in the Mall."
	}
}

object metal_chair "metal chair"
{
	nouns "chair" "metal"
	adjectives "metal" "shiny" "foldable"

	article "a"

	in Food_Court1

	is platform

	long_desc
	{
		"The metal chair is shiny and foldable, but rusted out, so the advanced folding properties are not available."
	}
}

object broken_chair "broken chair"
{
	nouns "chair" "broken"
	adjectives "broken"

	article "a"

	in Food_Court1

	long_desc
	{
		"This chair has been snapped in half by the poltergeist's mad mind."
	}
}

object chair_parts "chair parts"
{
	nouns "chair" "parts"
	adjectives "chair"

	is broken, plural
	article "some"

	in Food_Court1

	long_desc
	{
		"They are a collection of pieces that were once part of a larger, more whole (wholer?) chair."
	}
}


object aged_text "aged text"
{
	nouns "book" "text" "tome" "burgundy" "passage"
	adjective "aged" "yellowing" "crinkly" "burgundy" "thick"
	article "the"

	in Book_Store

	is readable

	initial_desc
	{	
		"\nCarelessly discarded on the ground next to the crucified girl is a thick, burgundy text."
	}
	long_desc
	{
		"The text has a grooved, sturdy cover, designed out of pressed reed and dyed a rich burgundy. It is about fifteen
		inches long, nine or ten inches thick."
	}		

	before
	{
		object DoRead
		{
			if location ~= Mall_Exit
			{
				"I flip through a few pages, but nothing really catches my eye. I'm sure that some long dead monk or 
				priest who nearly acquired whatever the 14th century version of repetitive motion syndrome in writing this
				thing is revolving in a European Potter's grave at my disinterest, but the words just seem to roll off
				my eyeballs in a splash of drama and desperate Calligraphy."
			}
			else
			{
				if EndState[1] = 0
				{
					EndState[1] = 1

					! remove Gibs's quip
					SetQuip(2,21,0)

					"I turn over the book and it opens to a section in the back. Just like in the \IDungeon Master's
					Guide\i and, I suppose, \IThe Bible,\i this is where \Ball\b the good bits are:\n"

					"\ITombs containing carrion, and hate within the ground\i"
					"\IA claw-scratched forced Caesarian, who could not remain bound\i"
					"\IGroping, moaning pantomime, beasts within the air\i"
					"\IRending tortured friends of mine, killing with a stare\i\n"

					"\IStacked on a forgotten grave, crushing souls and mud\i"
					"\IVirgin souls we try to save, walls crying with blood\i"
					"\ILeave the host, this eve, you took -- no longer will you dine\i"
					"\IThe mart's collapse, the walls all shook -- your attention shall be mine!\i\n"

					"All the arrogance and jeering has left Sydney, and she remains hovering over with an expectant,
					slightly confused expression on her face. We've got her enraptured for the moment, it
					would seem."

					CharExclaim(Audrey,ExclaimArray[11])

				}
				else
				{
					"There's nothing more that the book can really contribute to the proceedings."
				}
			}
		}
		object DoGet
		{

			move self to Player

			"Got it."

			ScoreArray[16] = 1

			if RubbleState[2] = 0
			{
				RubbleState[2] = 1 

				COLOR LIGHT_MAGENTA	
				"\n\Inoyo\BU\breYescasTtheMaSiDelittlef\Bu\bcKsick\Bl\bittleboy!!! !\i"
				COLOR TEXTCOLOR
			}
		}
	}
}


scenery party_mirror "mirror"
{
	nouns "mirror"
	article "the"

	in Party_Store
	
	long_desc
	{
		"A stylin' and engaging Chortlemaster with great hair is staring back at me."
	}
}

scenery party_junk "junk"
{
	nouns "junk" "garbage" "trash"
	article "some"

	is plural

	in Party_Store

	long_desc
	{
		"Upon closer inspection, the junk is just some random garbage that the guy who owns the store probably generated 
		in making his wares."
	}
}


scenery party_wares "masks"
{
	nouns "wares" "masks" "mask" 
	adjective "collection" "halloween"
	article "some"

	is plural

	in Party_Store

	long_desc
	{
		"There's a collection of masks in the Party Store, though many of them valueless, and all of them locked up tight to the wall."
	}
	before
	{
		object DoGet, DoMove
		{
			"The masks are permanently attached to the wall of the Party Store."
		}
	}
}

scenery party_desk "workdesk"
{

	nouns "desk" "workbench" "workdesk" "table"
	adjective "worn" "cheap"

	article "the"
	
	is platform

	capacity 50

	in Party_Store

	long_desc
	{
		"This workdesk is just a worn and cheap table that any office supply store would carry and sell for around sixty bucks."

		if child(self)
		{
			!""
			Perform(&DoLookIn,self)
		}
	}
}


scenery party_file_cabinet "file cabinet"
{
	nouns "cabinet" "container"
	adjective "file" "beige" "metal" "cheap"

	article "a"

	is container, openable, not open

	capacity 11

	in Party_Store

	size 1000

	long_desc
	{
		"It's colored a deep beige and stands about as tall as I do. It, like most of the other things in the room, is of cheap
		construction."
	}
}


scenery carpets "carpets"
{
	nouns "carpets" "blankets"
	article "some"

	in Party_Store

	long_desc
	{
		"The carpets and blankets are old, musty things have been tacked up onto the walls to hide the scratched-out drywall beneath."
	}
	before
	{
		object DoSmell
		{
			"The lot of them smell quite old -- like somebody's ancient, waterlogged basement. (Of course, in the waterlogged
			basement is precisely where my father, old man Nichodeimos, used to hide his stacks of smut, so there's really a
			conflicted reaction brewing in me."
		}
	}
}


scenery store_window "window"
{
	nouns "window" 
	adjective "glass"
	article "the"

	in Party_Store

	long_desc
	{
		"This rare window offers a glimpse to what is going on outside. 
		There is a terrible storm along the horizon that is visible from this direction. The clouds
		right above the mountains are electric with activity. The moon is soft and blurred and 
		red-orange."

		if self is not special
		{
			self is special
			"\nI stay for too long a moment and take it all in. The window itself is unbreakable,
			of course, to fend off thieves, and it's far too small for me to fit through, 
			but I can't deny how strong the feeling is to get on the other side of these walls,
			to sprint off into the distance until the snow-capped peaks are before me and to just
			burrow within them and hide until dawn... till some other dawn, days away.\n"

			"I come back to my senses after a few moments. I'll find another way out."
		}
	}
	before
	{
		object DoOpen
		{
			"I can't get it open. It's stuck to the wall, and made up of incredibly strong and willful glass."
		}
	}
}

scenery laser_pointer "disco laser pointer"
{
	nouns "laser" "pointer"
	adjectives "disco" "laser"
	article "the"

	in Party_Store

	is switchable, not switchedon

	long_desc
	{
		if self is switchedon
		{
			"The laser pointer is out there jivin'! It's scattering laser light everywhere and it's turned this placed into a 
			Block Party Central! Whoo-hoo!"
		}
		else
		{
			"The disco laser pointer is off, so this place isn't a Party Zone right now."
		}
	}
	after
	{
		object DoSwitchOn
		{
			"Party!! It's a ";
			color red
			
			"\BFUN FOR ALL FREE PARTY ZONE!\b ";

			color TEXTCOLOR
			
			"I get down and \Idance\i! Who doesn't like a rockin' party like this?"

			
		}
		object DoSwitchOff
		{
			"Party time is \Iover!\i"
		}
	}
}

scenery diploma "diploma"
{
	nouns "diploma"
	article "a"

	in Party_Store

	is readable 

	long_desc
	{
		"It reveals that it is owned by some smug fucker with a Bachelor's degree in Marketing. If this guy were truly so smart, 
		 he wouldn't be butt-chudding around with a business setup in New Haz."
	}
}
	

scenery Exit_kiosk "kiosk"
{
	nouns "kiosk"
	adjective "informational"
	article "the"

	in Mall_Exit

	long_desc
	{
		"The kiosk's only value is in telling me that the exit is to the north."
	}
}


scenery Exit_plants "plants"
{
	nouns "plants"
	article "some"

	in Mall_Exit

	long_desc
	{
		"They're green and healthy."
	}
}


object balloon1 "blue balloon"
{
	nouns "balloon"
	adjective "blue"
	article "the"

	in party_desk

	is container, breakable

	size 0

	capacity 1

	long_desc
	{
		if self is not broken
		{
			"It's colored blue, but the material used is a heavier than I'd expect -- like an expandable metallic bag. It floats
			in the air about where it's placed, so presumably it's got some helium in it, though a fair amount has leaked out."
		}
		else
		{
			"It's a popped blue balloon."
		}
	}
	before
	{
		object DoBreak
		{
			if self is not broken
			{
				self is broken
				"Ha-ha! \ISuck down the madness!\i\n"
				"(I break the balloon.)"
			}
			else
			{
				"It's, ah... well, some renegade already broke it."
			}
		}
	}


}


object urn "urn"
{
	nouns "urn"
	adjective "silver" "large" "reserved" "sizeable"
	article "an"

	in Party_Store

	is open, container, not openable
	size 1
	capacity 3

	initial_desc
	{
		"\nProminently displayed in the center of the room is a reserved, yet sizeable urn."
	}

	
	long_desc
	{
		"This rather large urn is crafted in the shape of an upside-down mushroom. It's a base silver in 
		color with a floral pattern painted on top."
	}
	before
	{
		object DoGet
		{
			move self to Player
			"Right on."

			if RubbleState[4] = 0
			{
				ScoreArray[14] = 1

				RubbleState[4] = 1 

				COLOR LIGHT_MAGENTA
				"\n\IleAveaL\Bo\bnEthEdEadth\BE\birasHesnoTFORYOULItTleoNe!!!\i"
				COLOR TEXTCOLOR
			}

		}
		object DoOpen
		{
			"It's not that kind of urn -- it's completely open, like how Graham Chapman's was when Terry Gillam
			accidently kicked him over and spilled him."
		}
	}
}



object ghast_head "head"
{
	noun "head" "ghast's" "ghast" "randolph"
	adjective "ghast's" "randolph's" "disembodied"
	article "the ghast's"

	is container, throwable
	capacity 1

	size 4

	weapon_dam_min 1
	weapon_dam_max 3

	long_desc
	{	
		"It's a disembodied head. One with kind of a squashed-in face, like... er, somebody whacked it with their boot or
		something. Most of the hair and flesh is still hanging on, but both the eyes are gone and the jaw hangs open in a
		particularly grotesque manner. The head formerly belonged to a guy named Randolph who would guilt people into
		taking his surveys and was always talking about all the women he met at his job, though none of them would ever go
		out with him because, hey, he's the Survey Guy."
	}
}


object water_1 "water"
{
	noun "water" "liquid" "fluid"
	adjective "holy"
	article "some"

	parse_rank 2

	in fountain

	long_desc
	{
		"It's a small amount of perfectly clear, shining and absolutely gorgeous water. It looks far superior than it ever
		did under normal daylight."
	}
	before
	{
		object DoThrowAt
		{
			
			if xobject.charnumber = 16
			{
				remove water_1 
				Deactivate(Water_Flows_Away)
				Activate(Replenish_Fountain)

				LocationState[16] = 0

				xobject.hitpoints = -101

				ScoreArray[12] = 1


				"\I\"Drink up, Dupre!\"\i I throw the water at the ghast's upper torso. It screams -- a horrible,
				piercing shriek of disbelief, and inhuman pain. My aim was a bit off, as the water chews through his shirt,
				eats through his belly and stomach and begins hissing away at the consumption of his rotting intestines and
				grodie twists of entrails.\n"

				"I wipe a little sweat away from my face and see that he truly can't comprehend what has happened to him. I sort
				of feel sorry for him... not just because the ghost killed him once, but because she brought him back and then he
				got killed in a second, crueler, manner.\n"

				"The slashing sounds of evaporation fade away as the last bits of the ghast inanimately fall to the floor and
				crumble into nothingness. His head bounces to the floor of the Mall";

				if Barnaby.hitpoints <= 0
				{
					Barnaby.hitpoints = Barnaby.maxhitpoints
					Barnaby is following 

					". Gibs wakes himself up and blinks stupidly a couple times as he sees the ghast's skull resting 
					peacefully on the floor. He winds up and kicks it down the corridor."


				}
				else
				{		
					", and Gibs calmly walks over and kicks it down the corridor."
				}
				remove ghast
				remove remote_ghast

				move ghast_head to Mall_Exit


			}
			else
			{
				"It doesn't appear as if splashing the water has any effect."
			}
		}
	}

	after
	{
	object DoDrink
	{
		remove self

		Activate(Replenish_Fountain)

		If Duffy.hitpoints < Duffy.maxhitpoints
		{
			"Ahhhhh! \IMine Luftwaffe!\i"
		}
		else
		{
			"Quite refreshing!"
		}

		Duffy.hitpoints+= 10

		if Duffy.hitpoints > Duffy.maxhitpoints
			Duffy.hitpoints = Duffy.maxhitpoints
	}
	object DoDrop
	{
		"Done."
		Activate(Water_Flows_Away)
	}

	}!after


	before
	{
	object DoGet
	{
		"(I'll only be able to hold the water for a couple moments before it flows through my hands...)"
		move self to Player

		Activate(Water_Flows_Away)

	}
	object DoPour, DoPutIn, DoMove
	{
		if location ~=Mall_Exit
		{
			if xobject ~= ghast_head
			{
				if xobject is container
				{
					move self to xobject
					"Done."
					return true
				}
				else
				{
					"I can't do that."
				}

			}
			else
			{
				"This is not the right place for that."
			}
		}
		else
		{
			if xobject ~= ghast_head
			{
				if xobject is container
				{
					move self to xobject
					"Done."
					return true
				}
				else
				{
					"I can't do that."
				}

			}
			else
			{
				if EndState[1] = 0
				{
					"Audrey stops me from doing that. It's not time just yet."
				}
				else
				{
					if EndState[2] = 0
					{
						! Remove Trott's quips
						SetQuip(8,14,0)
						SetQuip(8,15,0)
						move Trott to location 

						EndState[2] = 1 
						remove water_1

						Activate(Replenish_Fountain)

						"I pour the water into the ghast's head.\n"

						"I look up to see that tears have begun to fall from Sydney's eyes.\n"
		
						"Trott enters from the southeast. He lights up a cigarette. \"So,\"
						he says with a long exhale, \"What's going on? Hey, who needs a cohiba?\"
						He flips his lighter over to me."

						move lighter to Duffy

						CharExclaim(Audrey,ExclaimArray[12])
					}
					else
					{
						"Nothing else seems to happen."
					}
				}
			}
		}
	}
	} ! before
}


object candle "white candle"
{
	noun "candle" "shamash"
	adjective "white"
	article "the"

	in Menorah

	is candle_type

	size 1

	long_desc
	{
		if self is not special
		{
			"It's a simple, long, white candle. It is also the \Ishamash\i of the menorah. (The \Ishamash\i is used
			to light the other candles during Hanukkah, and it's also the candle which is placed in the middle
			of the menorah.)"
		}
		else
		{
			"The \Ishamash\i is a long, white candle that smells so bad that I can only imagine it was constructed
  			from the boiled-down bodies of the perspiring slaves who died while installing the first 
			French aqueducts."
		}
	}

	before
	{
		object DoBurn
		{
			if location ~= Mall_Exit
			{
				"I don't seem to be able to get any fire to take."
			
			}
			else
			{
				if EndState[2] = 1 and EndState[1] = 1 
				{
					if EndState[3] = 0
					{
						EndState[3] = 1
						
						! The candle is lit...
						"The candle is lit.\n"

						Sydney_Returns()

						remove self
					}
					else
					{
						"There's nothing more that can be done with that."
					}
				}
				else
				{
					"Audrey stops me from doing that."
				}
			}
		}

		object DoSmell
		{
			if self is not special
			{
				self is special
				"Oh \IJesus!\i This has to be the worst smelling candle I have ever encountered in my entire
				life. This thing would cause offense at a Phish concert in the middle of a heat wave. There
				is \Inothing\i remotely nice-smelling about this thing. It smells like carrion crossed with
				burning flesh with a coating of old feet just for good measure."
			}
		}
		object DoGet
		{
			if RubbleState[3] = 0
			{
				RubbleState[3] = 1

				COLOR LIGHT_MAGENTA
				"\IoUTOUTOUT\BNO\bNO\BNO\bNO\BNO\bNONO!!\i\n"
				COLOR TEXTCOLOR
			}

			move self to Player
			"It's mine."

			ScoreArray[15] = 1
		}
	}
}


object lighter "lighter"
{
	noun "lighter"
	article "the"

	size 0

	long_desc
	{
		"Trott's lighter is a little, transparent little see-through cheap and common gadget to produce flame. It's almost completely out of 
		fluid, though."
	}
	before
	{
		xobject DoBurn
		{
			if object = candle and location = Mall_Exit
			{
				Sydney_Returns()
			}
			else
			{
				"I don't have enough fluid to waste it."
			}
		}
	}
}


object bloodbag "bag of blood"
{
	noun "bag" "blood"
	adjectives "bag" "blood"
	article "the"

!	in coffin
	size 1

	is throwable

	weapon_dam_min 1
	weapon_dam_max 3

	long_desc
	{
		"This is a very large bag of, presumably, fresh human blood. The packaging indicates that it is of type O negative.
		There's like five liters of it here, it's quite a solid little package."
	}
	before
	{
		object DoHit, DoShoot, DoKick
		{
			"I should be more careful with the bag of blood than that."
		}
	}
	after
	{
		object DoGet
		{
			ScoreArray[28] = 1

			move self to Player

			"I grab the bag."
		}
	}
}